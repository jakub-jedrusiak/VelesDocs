[
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started",
    "section": "",
    "text": "Veles is a Python library, so before using it, you need to install Python. You can download an installation bundle from the official website. During installation, check the box saying to add Python to PATH. It will enable you to run Python by writing python in the terminal, without the full path.\nUsing an IDE is recommended. You can use any IDE, but I highly recommend Visual Studio Code.\nSome really basic knowledge how to use Python is recommended. If you know what’s a variable and how to call functions, you’re good to go."
  },
  {
    "objectID": "getting-started.html#questions",
    "href": "getting-started.html#questions",
    "title": "Getting started",
    "section": "Questions",
    "text": "Questions\nIn Veles, questions are a class of objects. There are two main ways of creating them – separately, using question() function or with questionnaire() when we want to convert a whole questionnaire at once.\n\nquestion()\nLet’s start with creating some metrical questions with question(). The syntax is as follows:\n\nvls.question(label, question_type, question_text, answers, options, description)\n\nThe first four arguments are required. label is an internal name of the question. It will become a column name in the database. Question type is a string representing one of the available question types. question_text is what the participant actually sees as an item in the survey. answers are the options the participant can choose. It can be a list or strings separated by commas. options can change the survey’s behaviour (e.g. make the answer order random), but we’ll provide more details later. description look like a subtitle. Both options and description arguments must be named if used.\n\ngender = vls.question(\n    \"gender\",\n    \"radio\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n    description=\"Choose an answer from options below.\",\n)\n\n\n\n\nGender question example\n\n\nEvery question type has its own wrapper functions, so we could also write gender = vls.radio(\"gender\", What is your gender?\", ...). A complete list of available question types can be found here.\n\n\nQuestion options\nEach question can have a series of options specified. To make it easier, there’s QuestionOptions object class which has all available options listed. Let’s use it to change answer order to random and add real None and Other options. We can create QuestionOptions outside the question itself, save it in a variable and put the variable in the question() function. We can also nest the QuestionOptions object inside the question() function.\n\ngender = vls.question(\n    \"gender\",\n    \"radio\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    options=QuestionOptions(\n        answers_order=\"random\",\n        none=True,\n        none_text=\"I don't want to answer\",\n        other=True,\n        other_placeholder=\"Write your gender.\",\n    ),\n    description=\"Choose an answer from options below.\",\n)\n\n\n\n\nGender questions with options specified\n\n\nList of available options can be found here.\n\n\nquestionnaire()\nOften in psychological sciences we want to use a whole questionnaire. It’s quite pointless to format every item separately, because they often have the same scale, options and predictable labels. In Veles there’s questionnaire() function that allows to convert the whole questionnaire at once.\n\nvls.questionnaire(label, items, answers, question_type, options, description)\n\nTo do this, we need to have the questionnaire in the form of a Python list. We can format it either by hand, using split() method or with split arguments. In the second and third cases, we need to have our items separated by some specified separator, e.g. every item in a separate line.\n\n# manually formatted list\nRSSI_items = [\n    \"I feel that I am a person of worth, at least on an equal plane with others.\",\n    \"I feel that I have a number of good qualities.\",\n    \"All in all, I am inclined to feel that I am a failure.\",\n    \"I am able to do things as well as most other people.\",\n    \"I feel I do not have much to be proud of.\",\n    \"I take a positive attitude toward myself.\",\n    \"On the whole, I am satisfied with myself.\",\n    \"I wish I could have more respect for myself.\",\n    \"I certainly feel useless at times.\",\n    \"At times I think I am no good at all.\",\n]\n\n# triple quotation for multi-line strings\nRSSI_items = \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\"\n\n# scale\nRSSI_scale = \"Strongly Agree; Agree; Disagree; Strongly Disagree\"\n\nRSSI = vls.questionnaire(\n    \"RSSI\", RSSI.split(\"\\n\"), RSSI_scale.split(\"; \"), options=QuestionOptions(required=True)\n)\n\nThe \"\"\" allows us to write multiple line strings.\nWe save our items and answers in variables and treat them with split(). In here I’ve done it inside the questionnaire() function, but I also could have done it anywhere before that. To learn more about Python string methods, see W3Schools lesson about them.\nOutput is a question list. Each question have the same options, scale and type. The labels are \"RSSI_1\", \"RSSI_2\", \"RSSI_3\" etc.\nOther arguments work as in question(). We can also provide question_type argument which have the default value of \"radio\"."
  },
  {
    "objectID": "getting-started.html#pages",
    "href": "getting-started.html#pages",
    "title": "Getting started",
    "section": "Pages",
    "text": "Pages\nEvery survey needs to have at least one page. You can create it with page().\n\nvls.page(label, questions, title, description, options)\n\nPages have their own labels. Questions can be provided as a list or separated by commas. You can also provide page’s title and description. The options argument accepts a PageOptions object. These are different options than in QuestionOptions. The list of available options can be found here.\n\nintro = vls.page(\"metrics\", gender)\n\nself_esteem = vls.page(\"RSSI\", RSSI)"
  },
  {
    "objectID": "getting-started.html#survey",
    "href": "getting-started.html#survey",
    "title": "Getting started",
    "section": "Survey",
    "text": "Survey\nWhen all elements are created, we can combine them into the final survey. We can do this with survey() function. It does two things – returns a Survey object and creates (or updates) survey.json file.\n\nvls.survey(pages, title, description, options)\n\n\nvls.survey(intro, self_esteem, title=\"Self-esteem and gender\")"
  },
  {
    "objectID": "ref/tools/page.html",
    "href": "ref/tools/page.html",
    "title": "page",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\npage(label, *questions, title, description=None, options=None)\n\n\n\nArguments\n\nlabel\n\n\nstr; internal name of the page.\n\n\n*questions\n\n\nlist[Question] or Question; list of Question objects to appear on the page. Often created with questionnaire().\n\n\ntitle\n\n\nstr; title of the page. Will be visible in the header.\n\n\ndescription\n\n\nstr; text just under page header.\n\n\noptions\n\n\nPageOptions; options object created with PageOptions(), changes behaviour of the page (e.g. random question order).\n\n\n\nValue\nA Page object.\n\n\nSee also\n\nquestionnaire() for converting whole questionnaires into a Questions list.\nPageOptions() for available page modifications.\nsurvey() for composing pages into one survey.\n\n\n\nExamples\n\nfrom velesresearch import page, question\n\ngender = question(\n    \"gender\",\n    \"radio\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n)\n\nmetric = page(\"metric\", gender)"
  },
  {
    "objectID": "ref/tools/questionnaire.html",
    "href": "ref/tools/questionnaire.html",
    "title": "questionnaire",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\nquestionnaire(\n    label, items, answers, question_type=\"radio\", description=None, options=None\n)\n\n\n\nArguments\n\nlabel\n\n\nstr; base for labelling the questionnaire. Usually the questionnaire’s abbreviation (e.g. MMPI). The output questions will be labelled label_number e.g. MMPI_1, MMPI_2, …, MMPI_567.\n\n\nitems\n\n\nlist[str]; list of questions. Can be easily created with split() method (see Examples).\n\n\nanswers\n\n\nlist[str] or str; scale for all questions. Every question must have the same scale.\n\n\nquestion_type\n\n\nstr; question type, \"radio\" by default. For list of available question types see Question Types.\n\n\ndescription\n\n\nstr; description for all questions. Looks like a subtitle.\n\n\noptions\n\n\nQuestionOptions; a QuestionOptions controlling options for all questions. For available options see QuestionOptions().\n\n\n\nValue\nA list of Question objects.\n\n\nSee also\n\nquestion() for creating single Question objects.\nQuestion types for available question types.\nQuestionOptions() for available question modifications.\npage() for composing questions into pages.\n\n\n\nExamples\n\nfrom velesresearch import questionnaire, QuestionOptions\n\n# triple quotation for multi-line strings\nRSSI_items = \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\"\n\nscale = \"Strongly Agree; Agree; Disagree; Strongly Disagree\"\n\n# make it a list of questions\nRRSI = questionnaire(\"RSSI\", RSSI_items.split(\"\\n\"), scale.split(\"; \"), options=QuestionOptions(required=True))"
  },
  {
    "objectID": "ref/overview.html",
    "href": "ref/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nCategories\n\n\n\n\n\n\npage\n\n\nCreate Page object\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\nquestion\n\n\nCreate Question object\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\nquestionnaire\n\n\nConvert a questionnaire to a list of questions\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\nsurvey\n\n\nCreate Survey object and create survey.json\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ref/tools/survey.html",
    "href": "ref/tools/survey.html",
    "title": "survey",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\nsurvey(*pages, title=None, description=None, options=None, create_file=True)\n\n\n\nArguments\n\n*pages\n\n\nlist[Page] or Page; list of Page objects or a single Page object that will create a survey.\n\n\ntitle\n\n\nstr; title of the survey. Will be visible in the header.\n\n\ndescription\n\n\nstr; text just under survey header.\n\n\noptions\n\n\nSurveyOptions; options object created with SurveyOptions(), changes behaviour of the survey.\n\n\ncreate_file\n\n\nbool; controls whether survey.json is created.\n\n\n\nValue\nA Survey object. Also file survey.json is created in the working directory as a side effect if create_file = True.\n\n\nSee also\nSurveyOptions() for available survey modifications.\n\n\nExamples\n\nfrom velesresearch import question, page, survey\n\ngender = question(\n    \"gender\",\n    \"radio\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n)\n\nmetric = page(\"metric\", gender)\n\nsurvey(metric)"
  },
  {
    "objectID": "ref/tools/question.html",
    "href": "ref/tools/question.html",
    "title": "question",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\nquestion(label, question_type, question_text, *answers, description=None, options=None)\n\n\n\nArguments\n\nlabel\n\n\nstr; internal name of the question. Will become column name in the database.\n\n\nquestion_type\n\n\nstr; type of the question. For list of available question types see Question types.\n\n\nquestion_text\n\n\nstr; text of the question. This is what the participant actually sees.\n\n\n*answers\n\n\nlist[str] or str; list of possible answers. Can be given as a list object or subsequent string objects separated by commas.\n\n\noptions\n\n\nQuestionOptions; options object created with QuestionOptions(), changes behaviour of the question (e.g. random answer order or required answer).\n\n\ndescription\n\n\nstr; description of the question. Looks like a subtitle. Can be used to give the participant additional information, e.g. \"in years\" in an age question.\n\n\n\nValue\nA Question object.\n\n\nSee also\n\nquestionnaire() for converting whole questionnaires into a Questions list.\nQuestion types for wrappers like radio() or checkbox() and available question types.\nQuestionOptions() for available question modifications.\npage() for composing questions into pages.\n\n\n\nExamples\n\nfrom velesresearch import question, QuestionOptions\n\ngender = question(\n    \"gender\",\n    \"radio\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    options=QuestionOptions(\n        answers_order=\"random\",\n        none=True,\n        none_text=\"I don't want to answer\",\n        other=True,\n        other_placeholder=\"Write your gender.\",\n    ),\n    description=\"Choose an answer from options below.\",\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Veles is a free and open source Python research package, primarly for social scientists. It’s goal is to provide an interface for surveys and chronometric experiments. It combines the power of Survey.js and PsychoJS (PsychoPy) with Python interface to create self contained research units that can be self-hosted. Veles’ own web service for creating and hosting experiments are planned.\n\nOverview\nVeles is in pre-alpha development, but the goal features are:\n\nFree and open source.\nText-based, so automatable and easily modifiable.\nIntegration with GitHub.\nAbility to use JavaScript and CSS directly.\nOpen source documentation.\nPython-based, so every Python tools work.\nEsay to collaborate through git.\nVS code extension pack.\nCustom redirection in the end (for panels).\nPsychoPy integration.\nJavaScript code preview.\nModifiable themes.\n\n\n\nInstallation\nYou can install the current version of Veles with:\npip install velesresearch\nYou can install development version (unstable) with:\npip install https://github.com/jakub-jedrusiak/VelesResearch.git"
  }
]