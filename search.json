[
  {
    "objectID": "ref/wrappers.html",
    "href": "ref/wrappers.html",
    "title": "Wrappers for question types",
    "section": "",
    "text": "Create a survey object.\n\n\n\nsurvey(\n    *pages: PageModel | list[PageModel],\n    createStructure: bool = True,\n    buildForPublication: bool = False,\n    folderName: str = 'survey',\n    path: str | pathlib.Path = '/home/jakub/Pulpit/git-repos/VelesResearch',\n    addScoreToResults: bool = True,\n    allowCompleteSurveyAutomatic: bool = True,\n    allowResizeComment: bool = True,\n    autoGrowComment: bool = False,\n    backgroundImage: str | None = None,\n    backgroundOpacity: int = 1,\n    calculatedValues: list[dict] | None = None,\n    checkErrorsMode: str = 'onNextPage',\n    commentAreaRows: int = 2,\n    completedBeforeHtml: str | None = None,\n    completedHtml: str | None = None,\n    completedHtmlOnCondition: list[dict] | None = None,\n    completeText: str | None = None,\n    cookieName: str | None = None,\n    editText: str | None = None,\n    firstPageIsStarted: bool | None = None,\n    focusFirstQuestionAutomatic: bool = False,\n    focusOnFirstError: bool = True,\n    goNextPageAutomatic: bool = False,\n    locale: str = 'en',\n    logo: str | None = None,\n    logoFit: str = 'contain',\n    logoHeight: str = '200px',\n    logoPosition: str = 'left',\n    logoWidth: str = '300px',\n    matrixDragHandleArea: str = 'entireItem',\n    maxOthersLength: int = 0,\n    maxTextLength: int = 0,\n    maxTimeToFinish: int | None = None,\n    maxTimeToFinishPage: int | None = None,\n    mode: str = 'edit',\n    navigateToUrl: str | None = None,\n    navigateToUrlOnCondition: list[dict] | None = None,\n    numberOfGroups: int = 1,\n    pageNextText: str | None = None,\n    pagePrevText: str | None = None,\n    previewText: str | None = None,\n    progressBarInheritWidthFrom: str = 'container',\n    progressBarShowPageNumbers: bool = False,\n    progressBarShowPageTitles: bool = False,\n    progressBarType: str = 'pages',\n    questionDescriptionLocation: str = 'underTitle',\n    questionErrorLocation: str = 'top',\n    questionsOnPageMode: str = 'standard',\n    questionsOrder: str = 'initial',\n    questionStartIndex: int | str | None = None,\n    questionTitleLocation: str = 'top',\n    questionTitlePattern: str = 'numTitleRequire',\n    requiredText: str = '*',\n    scoresSuffix: str = '_score',\n    showCompletedPage: bool = True,\n    showNavigationButtons: str = 'bottom',\n    showPageNumbers: bool | None = None,\n    showPageTitles: bool = True,\n    showPrevButton: bool = True,\n    showPreviewBeforeComplete: str = 'noPreview',\n    showProgressBar: str = 'off',\n    showQuestionNumbers: bool | str = True,\n    showTimerPanel: str = 'none',\n    showTimerPanelMode: str = 'all',\n    showTitle: bool = True,\n    showTOC: bool = False,\n    startSurveyText: str | None = None,\n    storeOthersAsComment: bool = True,\n    textUpdateMode: str = 'onBlur',\n    title: str | None = None,\n    tocLocation: str = 'left',\n    triggers: list[dict] | None = None,\n    validateVisitedEmptyFields: bool = False,\n    width: str | None = None,\n    widthMode: str = 'auto',\n    addCode: dict | None = None,\n    **kwargs\n) -&gt; SurveyModel\n\n\n\n\naddScoreToResults : bool Whether to add the scores of the questions with correctAnswer to the results data. See scoresSuffix.\nallowCompleteSurveyAutomatic : bool Whether the survey should complete automatically after all questions on the last page had been answered. Works only if goNextPageAutomatic=True. Default is True.\nallowResizeComment : bool Whether to allow resizing the long questions input area. Default is True. Can be overridden for individual questions.\nautoGrowComment : bool Whether to automatically grow the long questions input area. Default is False. Can be overridden for individual questions.\nbackgroundImage : str | None URL or base64 of the background image.\nbackgroundOpacity : int The opacity of the background image. 0 is transparent, 1 is opaque.\ncalculatedValues : list[dict] | None The calculated values for the survey. List of dictionaries with keys name, expression and optionally includeIntoResult (bool) to save the value in the db.\ncheckErrorsMode : str The mode of checking errors. Can be ‘onNextPage’, ‘onValueChanged’, ‘onComplete’.\ncommentAreaRows : int The number of rows for the comment area of the questions with showCommentArea or showOtherItem set to True. Default is 2. Can be overridden for individual questions.\ncompletedBeforeHtml : str | None HTML content to show if the survey had been completed before. Use with cookieName.\ncompletedHtml : str | None HTML content to show after the survey is completed.\ncompletedHtmlOnCondition : list[dict] | None HTML content to show after the survey is completed if the condition is met. List of dictionaries with keys expression and html keys.\ncompleteText : str | None Text for the ‘Complete’ button.\ncookieName : str | None The name of the cookie to store the information about the survey having been completed. See completedBeforeHtml.\neditText : str | None Text for the ‘Edit’ button if showPreviewBeforeComplete=True.\nfirstPageIsStarted : bool | None Whether the first page is a start page. Default is False.\nfocusFirstQuestionAutomatic : bool Whether to focus the first question automatically. Default is False.\nfocusOnFirstError : bool Whether to focus on the first error if it was raised. Default is True.\ngoNextPageAutomatic : bool Whether to go to the next page automatically after all questions had been answered. Default is False.\nlocale : str The locale of the survey. Default is ‘en’.\nlogo : str | None URL or base64 of the logo image.\nlogoFit : str The object-fit CSS property logo image. Can be ‘contain’, ‘cover’, ‘fill’, ‘none’.\nlogoHeight : str The height of the logo image in CSS units. Default is ‘200px’.\nlogoPosition : str The position of the logo image. Can be ‘left’, ‘right’, ‘none’.\nlogoWidth : str The width of the logo image in CSS units. Default is ‘300px’.\nmatrixDragHandleArea : str The part of an item with which the users can drag and drop in dynamic matrix questions. Can be ‘entireItem’ (default), ‘icon’ (drag icon only).\nmaxOthersLength : int The maximum length of the comment area in the questions with showOtherItem or showCommentArea set to True. Default is 0 (no limit).\nmaxTextLength : int The maximum length of the text in the textual questions. Default is 0 (no limit).\nmaxTimeToFinish : int | None Maximum time in seconds to finish the survey.\nmaxTimeToFinishPage : int | None Maximum time in seconds to finish the page. 0 means no limit.\nmode : str The mode of the survey. Can be ‘edit’ (can be filled), ‘display’ (read-only).\nnavigateToUrl : str | None URL to navigate to after the survey is completed.\nnavigateToUrlOnCondition : list[dict] | None URL to navigate to after the survey is completed if the condition is met. List of dictionaries with keys expression and url keys.\npageNextText : str | None Text for the ‘Next’ button.\npagePrevText : str | None Text for the ‘Previous’ button.\npreviewText : str | None Text for the ‘Preview’ button if showPreviewBeforeComplete=True.\nprogressBarInheritWidthFrom : str The element from which the progress bar should inherit the width. Can be ‘container’, ‘survey’.\nprogressBarShowPageNumbers : bool Whether to show the page numbers on the progress bar. Only if progressBarType=\"pages\". Default is False. See showProgressBar.\nprogressBarShowPageTitles : bool Whether to show the page titles on the progress bar. Only if progressBarType=\"pages\". Default is False. See showProgressBar.\nprogressBarType : str The type of the progress bar. Can be ‘pages’ (default), ‘questions’, ‘requiredQuestions’, ‘correctQuestions’.\nquestionDescriptionLocation : str The location of the description for the questions. Can be ‘underTitle’ (default), ‘underInput’. Can be overridden for individual questions.\nquestionErrorLocation : str The location of the error text for the questions. Can be ‘top’ (default), ‘bottom’. Can be overridden for individual questions.\nquestionsOnPageMode : str The mode of the questions on the page. Can be ‘standard’ (default; use structure in JSON), ‘singlePage’ (combine all questions into a single page), ‘questionPerPage’ (move all questions to separate pages).\nquestionsOrder : str The order of the questions. Can be ‘initial’ (default), ‘random’. Can be overridden for individual pages.\nquestionStartIndex : int | str | None The number or letter with which the questions numbering should start.\nquestionTitleLocation : str The location of the title for the questions. Can be ‘top’ (default), ‘bottom’, ‘left’. Can be overridden for individual questions or pages.\nquestionTitlePattern : str The pattern of the question title. See https://surveyjs.io/form-library/documentation/design-survey/configure-question-titles#title-pattern.\nrequiredText : str The text denoting the required questions. Default is ’*’.\nscoresSuffix : str The suffix of the score column if addScoreToResults=True. Default is ’_score’.\nshowCompletedPage : bool Whether to show the completed page. Default is True.\nshowNavigationButtons : str The location of the navigation buttons. Can be ‘bottom’ (default), ‘top’, ‘both’, ‘none’.\nshowPageNumbers : bool | None Whether to show the page numbers in the pages’ titles.\nshowPageTitles : bool Whether to show the page titles. Default is True.\nshowPrevButton : bool Whether to show the ‘Previous’ button. Default is True.\nshowPreviewBeforeComplete : str Whether to preview all answers before completion. Can be ‘noPreview’ (default), ‘showAllQuestions’, ‘showAnsweredQuestions’.\nshowProgressBar : str Whether to show the progress bar. Can be ‘off’ (default), ‘aboveHeader’, ‘belowHeader’, ‘bottom’, ‘topBottom’, ‘auto’.\nshowQuestionNumbers : bool | str Whether to show the question numbers. Default is True. Can be True, ‘on’, False, ‘off’, ‘onpage’ (number each page anew).\nshowTimerPanel : str Whether to show the timer panel. Can be ‘none’ (default), ‘top’, ‘bottom’. See maxTimeToFinish, maxTimeToFinishPage, and showTimerPanelMode.\nshowTimerPanelMode : str What times to show on the timer panel. Can be ‘all’ (default), ‘page’, ‘survey’. See showTimerPanel.\nshowTitle : bool Whether to show the survey title. Default is True.\nshowTOC : bool Whether to show the table of contents. Default is False. See tocLocation.\nstartSurveyText : str | None Text for the ‘Start’ button if firstPageIsStarted=True.\nstoreOthersAsComment : bool Whether to store the ‘Other’ answers in a separate column (True; see commentSuffix) or in the question column (False). Default is True.\ntextUpdateMode : str The mode of updating the text. Can be ‘onBlur’ (default; update after the field had been unclicked), ‘onTyping’ (update every key press). Can be overridden for individual questions.\ntitle : str | None The title of the survey.\ntocLocation : str The location of the table of contents. Can be ‘left’ (default), ‘right’. See showTOC.\ntriggers : str | None Triggers for the survey. Usually not necessary. See https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-survey-logic-triggers.\nvalidateVisitedEmptyFields : bool Whether to validate empty fields that had been clicked, and unclicked empty. Default is False.\nwidth : str | None Width of the survey in CSS units. Default is None (inherit from the container).\nwidthMode : str The mode of the width. Can be ‘auto’ (default; the width is set by the content), ‘static’, ‘responsive’.\naddCode : dict | None Additional code for the survey. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature",
    "href": "ref/wrappers.html#signature",
    "title": "Wrappers for question types",
    "section": "",
    "text": "survey(\n    *pages: PageModel | list[PageModel],\n    createStructure: bool = True,\n    buildForPublication: bool = False,\n    folderName: str = 'survey',\n    path: str | pathlib.Path = '/home/jakub/Pulpit/git-repos/VelesResearch',\n    addScoreToResults: bool = True,\n    allowCompleteSurveyAutomatic: bool = True,\n    allowResizeComment: bool = True,\n    autoGrowComment: bool = False,\n    backgroundImage: str | None = None,\n    backgroundOpacity: int = 1,\n    calculatedValues: list[dict] | None = None,\n    checkErrorsMode: str = 'onNextPage',\n    commentAreaRows: int = 2,\n    completedBeforeHtml: str | None = None,\n    completedHtml: str | None = None,\n    completedHtmlOnCondition: list[dict] | None = None,\n    completeText: str | None = None,\n    cookieName: str | None = None,\n    editText: str | None = None,\n    firstPageIsStarted: bool | None = None,\n    focusFirstQuestionAutomatic: bool = False,\n    focusOnFirstError: bool = True,\n    goNextPageAutomatic: bool = False,\n    locale: str = 'en',\n    logo: str | None = None,\n    logoFit: str = 'contain',\n    logoHeight: str = '200px',\n    logoPosition: str = 'left',\n    logoWidth: str = '300px',\n    matrixDragHandleArea: str = 'entireItem',\n    maxOthersLength: int = 0,\n    maxTextLength: int = 0,\n    maxTimeToFinish: int | None = None,\n    maxTimeToFinishPage: int | None = None,\n    mode: str = 'edit',\n    navigateToUrl: str | None = None,\n    navigateToUrlOnCondition: list[dict] | None = None,\n    numberOfGroups: int = 1,\n    pageNextText: str | None = None,\n    pagePrevText: str | None = None,\n    previewText: str | None = None,\n    progressBarInheritWidthFrom: str = 'container',\n    progressBarShowPageNumbers: bool = False,\n    progressBarShowPageTitles: bool = False,\n    progressBarType: str = 'pages',\n    questionDescriptionLocation: str = 'underTitle',\n    questionErrorLocation: str = 'top',\n    questionsOnPageMode: str = 'standard',\n    questionsOrder: str = 'initial',\n    questionStartIndex: int | str | None = None,\n    questionTitleLocation: str = 'top',\n    questionTitlePattern: str = 'numTitleRequire',\n    requiredText: str = '*',\n    scoresSuffix: str = '_score',\n    showCompletedPage: bool = True,\n    showNavigationButtons: str = 'bottom',\n    showPageNumbers: bool | None = None,\n    showPageTitles: bool = True,\n    showPrevButton: bool = True,\n    showPreviewBeforeComplete: str = 'noPreview',\n    showProgressBar: str = 'off',\n    showQuestionNumbers: bool | str = True,\n    showTimerPanel: str = 'none',\n    showTimerPanelMode: str = 'all',\n    showTitle: bool = True,\n    showTOC: bool = False,\n    startSurveyText: str | None = None,\n    storeOthersAsComment: bool = True,\n    textUpdateMode: str = 'onBlur',\n    title: str | None = None,\n    tocLocation: str = 'left',\n    triggers: list[dict] | None = None,\n    validateVisitedEmptyFields: bool = False,\n    width: str | None = None,\n    widthMode: str = 'auto',\n    addCode: dict | None = None,\n    **kwargs\n) -&gt; SurveyModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments",
    "href": "ref/wrappers.html#arguments",
    "title": "Wrappers for question types",
    "section": "",
    "text": "addScoreToResults : bool Whether to add the scores of the questions with correctAnswer to the results data. See scoresSuffix.\nallowCompleteSurveyAutomatic : bool Whether the survey should complete automatically after all questions on the last page had been answered. Works only if goNextPageAutomatic=True. Default is True.\nallowResizeComment : bool Whether to allow resizing the long questions input area. Default is True. Can be overridden for individual questions.\nautoGrowComment : bool Whether to automatically grow the long questions input area. Default is False. Can be overridden for individual questions.\nbackgroundImage : str | None URL or base64 of the background image.\nbackgroundOpacity : int The opacity of the background image. 0 is transparent, 1 is opaque.\ncalculatedValues : list[dict] | None The calculated values for the survey. List of dictionaries with keys name, expression and optionally includeIntoResult (bool) to save the value in the db.\ncheckErrorsMode : str The mode of checking errors. Can be ‘onNextPage’, ‘onValueChanged’, ‘onComplete’.\ncommentAreaRows : int The number of rows for the comment area of the questions with showCommentArea or showOtherItem set to True. Default is 2. Can be overridden for individual questions.\ncompletedBeforeHtml : str | None HTML content to show if the survey had been completed before. Use with cookieName.\ncompletedHtml : str | None HTML content to show after the survey is completed.\ncompletedHtmlOnCondition : list[dict] | None HTML content to show after the survey is completed if the condition is met. List of dictionaries with keys expression and html keys.\ncompleteText : str | None Text for the ‘Complete’ button.\ncookieName : str | None The name of the cookie to store the information about the survey having been completed. See completedBeforeHtml.\neditText : str | None Text for the ‘Edit’ button if showPreviewBeforeComplete=True.\nfirstPageIsStarted : bool | None Whether the first page is a start page. Default is False.\nfocusFirstQuestionAutomatic : bool Whether to focus the first question automatically. Default is False.\nfocusOnFirstError : bool Whether to focus on the first error if it was raised. Default is True.\ngoNextPageAutomatic : bool Whether to go to the next page automatically after all questions had been answered. Default is False.\nlocale : str The locale of the survey. Default is ‘en’.\nlogo : str | None URL or base64 of the logo image.\nlogoFit : str The object-fit CSS property logo image. Can be ‘contain’, ‘cover’, ‘fill’, ‘none’.\nlogoHeight : str The height of the logo image in CSS units. Default is ‘200px’.\nlogoPosition : str The position of the logo image. Can be ‘left’, ‘right’, ‘none’.\nlogoWidth : str The width of the logo image in CSS units. Default is ‘300px’.\nmatrixDragHandleArea : str The part of an item with which the users can drag and drop in dynamic matrix questions. Can be ‘entireItem’ (default), ‘icon’ (drag icon only).\nmaxOthersLength : int The maximum length of the comment area in the questions with showOtherItem or showCommentArea set to True. Default is 0 (no limit).\nmaxTextLength : int The maximum length of the text in the textual questions. Default is 0 (no limit).\nmaxTimeToFinish : int | None Maximum time in seconds to finish the survey.\nmaxTimeToFinishPage : int | None Maximum time in seconds to finish the page. 0 means no limit.\nmode : str The mode of the survey. Can be ‘edit’ (can be filled), ‘display’ (read-only).\nnavigateToUrl : str | None URL to navigate to after the survey is completed.\nnavigateToUrlOnCondition : list[dict] | None URL to navigate to after the survey is completed if the condition is met. List of dictionaries with keys expression and url keys.\npageNextText : str | None Text for the ‘Next’ button.\npagePrevText : str | None Text for the ‘Previous’ button.\npreviewText : str | None Text for the ‘Preview’ button if showPreviewBeforeComplete=True.\nprogressBarInheritWidthFrom : str The element from which the progress bar should inherit the width. Can be ‘container’, ‘survey’.\nprogressBarShowPageNumbers : bool Whether to show the page numbers on the progress bar. Only if progressBarType=\"pages\". Default is False. See showProgressBar.\nprogressBarShowPageTitles : bool Whether to show the page titles on the progress bar. Only if progressBarType=\"pages\". Default is False. See showProgressBar.\nprogressBarType : str The type of the progress bar. Can be ‘pages’ (default), ‘questions’, ‘requiredQuestions’, ‘correctQuestions’.\nquestionDescriptionLocation : str The location of the description for the questions. Can be ‘underTitle’ (default), ‘underInput’. Can be overridden for individual questions.\nquestionErrorLocation : str The location of the error text for the questions. Can be ‘top’ (default), ‘bottom’. Can be overridden for individual questions.\nquestionsOnPageMode : str The mode of the questions on the page. Can be ‘standard’ (default; use structure in JSON), ‘singlePage’ (combine all questions into a single page), ‘questionPerPage’ (move all questions to separate pages).\nquestionsOrder : str The order of the questions. Can be ‘initial’ (default), ‘random’. Can be overridden for individual pages.\nquestionStartIndex : int | str | None The number or letter with which the questions numbering should start.\nquestionTitleLocation : str The location of the title for the questions. Can be ‘top’ (default), ‘bottom’, ‘left’. Can be overridden for individual questions or pages.\nquestionTitlePattern : str The pattern of the question title. See https://surveyjs.io/form-library/documentation/design-survey/configure-question-titles#title-pattern.\nrequiredText : str The text denoting the required questions. Default is ’*’.\nscoresSuffix : str The suffix of the score column if addScoreToResults=True. Default is ’_score’.\nshowCompletedPage : bool Whether to show the completed page. Default is True.\nshowNavigationButtons : str The location of the navigation buttons. Can be ‘bottom’ (default), ‘top’, ‘both’, ‘none’.\nshowPageNumbers : bool | None Whether to show the page numbers in the pages’ titles.\nshowPageTitles : bool Whether to show the page titles. Default is True.\nshowPrevButton : bool Whether to show the ‘Previous’ button. Default is True.\nshowPreviewBeforeComplete : str Whether to preview all answers before completion. Can be ‘noPreview’ (default), ‘showAllQuestions’, ‘showAnsweredQuestions’.\nshowProgressBar : str Whether to show the progress bar. Can be ‘off’ (default), ‘aboveHeader’, ‘belowHeader’, ‘bottom’, ‘topBottom’, ‘auto’.\nshowQuestionNumbers : bool | str Whether to show the question numbers. Default is True. Can be True, ‘on’, False, ‘off’, ‘onpage’ (number each page anew).\nshowTimerPanel : str Whether to show the timer panel. Can be ‘none’ (default), ‘top’, ‘bottom’. See maxTimeToFinish, maxTimeToFinishPage, and showTimerPanelMode.\nshowTimerPanelMode : str What times to show on the timer panel. Can be ‘all’ (default), ‘page’, ‘survey’. See showTimerPanel.\nshowTitle : bool Whether to show the survey title. Default is True.\nshowTOC : bool Whether to show the table of contents. Default is False. See tocLocation.\nstartSurveyText : str | None Text for the ‘Start’ button if firstPageIsStarted=True.\nstoreOthersAsComment : bool Whether to store the ‘Other’ answers in a separate column (True; see commentSuffix) or in the question column (False). Default is True.\ntextUpdateMode : str The mode of updating the text. Can be ‘onBlur’ (default; update after the field had been unclicked), ‘onTyping’ (update every key press). Can be overridden for individual questions.\ntitle : str | None The title of the survey.\ntocLocation : str The location of the table of contents. Can be ‘left’ (default), ‘right’. See showTOC.\ntriggers : str | None Triggers for the survey. Usually not necessary. See https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-survey-logic-triggers.\nvalidateVisitedEmptyFields : bool Whether to validate empty fields that had been clicked, and unclicked empty. Default is False.\nwidth : str | None Width of the survey in CSS units. Default is None (inherit from the container).\nwidthMode : str The mode of the width. Can be ‘auto’ (default; the width is set by the content), ‘static’, ‘responsive’.\naddCode : dict | None Additional code for the survey. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-1",
    "href": "ref/wrappers.html#signature-1",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\npage(\n    name: str,\n    *questions: QuestionModel | list[QuestionModel],\n    description: str | None = None,\n    enableIf: str | None = None,\n    id: str | None = None,\n    isRequired: bool = False,\n    maxTimeToFinish: int | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    navigationButtonsVisibility: str = 'inherit',\n    navigationDescription: str | None = None,\n    navigationTitle: str | None = None,\n    questionErrorLocation: str = 'default',\n    questionTitleLocation: str = 'default',\n    questionsOrder: str = 'default',\n    readOnly: bool = False,\n    requiredErrorText: str | None = None,\n    requiredIf: str | None = None,\n    state: str = 'default',\n    title: str | None = None,\n    visible: bool = True,\n    visibleIf: str | None = None,\n    visibleIndex: int | None = None,\n    addCode: dict | None = None,\n    **kwargs\n) -&gt; PageModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-1",
    "href": "ref/wrappers.html#arguments-1",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\nquestions : QuestionModel | list[QuestionModel] The questions on the page.\ndescription : str | None Optional subtitle or description of the page.\nenableIf : str | None Expression to enable the page.\nid : str | None HTML id attribute for the page. Usually not necessary.\nisRequired : bool Whether the page is required (at least one question must be answered).\nmaxTimeToFinish : int | None Maximum time in seconds to finish the page.\nmaxWidth : str Maximum width of the page in CSS units.\nminWidth : str Minimum width of the page in CSS units.\nnavigationButtonsVisibility : str The visibility of the navigation buttons. Can be ‘inherit’, ‘show’, ‘hide’.\nnavigationDescription : str | None Description for the page navigation.\nnavigationTitle : str | None Title for the page navigation.\nquestionErrorLocation : str The location of the error text for the questions. Can be ‘default’, ‘top’, ‘bottom’.\nquestionTitleLocation : str The location of the title for the questions. Can be ‘default’, ‘top’, ‘bottom’.\nquestionsOrder : str The order of the questions. Can be ‘default’, ‘random’.\nreadOnly : bool Whether the page is read-only.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the page required (at least one question must be answered).\nstate : str If the page should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitle : str The visible title of the page.\nvisible : bool Whether the page is visible.\nvisibleIf : str | None Expression to make the page visible.\nvisibleIndex : int | None The index at which the page should be visible.\nwidth : str Width of the page\naddCode : dict | None Additional code for the survey. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-2",
    "href": "ref/wrappers.html#signature-2",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\npanel(\n    name: str,\n    *questions: QuestionModel | list[QuestionModel],\n    description: str | None = None,\n    enableIf: str | None = None,\n    id: str | None = None,\n    innerIndent: int | None = None,\n    isRequired: bool = False,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    questionErrorLocation: str = 'default',\n    questionsOrder: str = 'default',\n    questionStartIndex: str | None = None,\n    questionTitleLocation: str = 'default',\n    questionTitleWidth: str | None = None,\n    readOnly: bool = False,\n    requiredErrorText: str | None = None,\n    requiredIf: str | None = None,\n    rightIndent: int | None = None,\n    showNumber: bool = False,\n    showQuestionNumbers: str = 'default',\n    startWithNewLine: bool = True,\n    visible: bool = True,\n    visibleIf: str | None = None,\n    width: str = '',\n    **kwargs\n) -&gt; PanelModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-2",
    "href": "ref/wrappers.html#arguments-2",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\nquestions : QuestionModel | list[QuestionModel] The questions on the panel.\ndescription : str | None Optional subtitle or description of the panel.\nenableIf : str | None Expression to enable the panel.\nid : str | None HTML id attribute for the panel. Usually not necessary.\ninnerIndent : int | None The inner indent of the panel.\nisRequired : bool Whether the panel is required (at least one question must be answered).\nmaxWidth : str Maximum width of the panel in CSS units.\nminWidth : str Minimum width of the panel in CSS units.\nquestionErrorLocation : str The location of the error text for the questions. Can be ‘default’, ‘top’, ‘bottom’.\nquestionsOrder : str The order of the questions. Can be ‘default’, ‘random’.\nquestionStartIndex : str | None The number or letter with which the questions numbering should start.\nquestionTitleLocation : str The location of the title for the questions. Can be ‘default’, ‘top’, ‘bottom’.\nquestionTitleWidth : str | None The width of the question title.\nreadOnly : bool Whether the panel is read-only.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the panel required (at least one question must be answered).\nrightIndent : int | None The right indent of the panel.\nshowNumber : bool Whether to show the panel number.\nshowQuestionNumbers : str Whether to show the question numbers. Can be ‘default’, ‘on’, ‘off’, ‘onpage’ (number each page anew).\nstartWithNewLine : bool Whether to start the panel on a new line.\nvisible : bool Whether the panel is visible.\nvisibleIf : str | None Expression to make the panel visible.\nwidth : str Width of the panel.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-3",
    "href": "ref/wrappers.html#signature-3",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ndropdown(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    choicesMax: int | None = None,\n    choicesMin: int | None = None,\n    choicesStep: int | None = None,\n    placeholder: str | None = None,\n    **kwargs\n) -&gt; QuestionDropdownModel | list[QuestionDropdownModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-3",
    "href": "ref/wrappers.html#arguments-3",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nchoices : str | dict | list The choices for the question. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ...}. You can also add visibleIf, enableIf, and requiredIf to the dictionary.\nchoicesFromQuestion : str | None The name of the question to get the choices from if the are to be copied. Use with choicesFromQuestionMode.\nchoicesFromQuestionMode : str The mode of copying choices. Can be ‘all’, ‘selected’, ‘unselected’.\nchoicesMax : int | None Maximum for automatically generated choices. Use with choicesMin and choicesStep.\nchoicesMin : int | None Minimum for automatically generated choices. Use with choicesMax and choicesStep.\nchoicesOrder : str The order of the choices. Can be ‘none’, ‘asc’, ‘desc’, ‘random’.\nchoicesStep : int | None Step for automatically generated choices. Use with choicesMax and choicesMin.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndontKnowText: str | None = None\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfChoicesEmpty: bool | None = None\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nnoneText: str | None = None\notherErrorText: str | None = None\notherText: str | None = None\nplaceholder : str | None Placeholder text.\nreadOnly : bool Whether the question is read-only.\nrefuseText: str | None = None\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowDontKnowItem: bool = False\nshowNoneItem: bool = False\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nshowOtherItem: bool = False\nshowRefuseItem: bool = False\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-4",
    "href": "ref/wrappers.html#signature-4",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ntext(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    autocomplete: str | None = None,\n    inputType: str = 'text',\n    max: str | int | None = None,\n    maxErrorText: str | None = None,\n    maxLength: int | None = None,\n    maxValueExpression: str | None = None,\n    min: str | int | None = None,\n    minErrorText: str | None = None,\n    minValueExpression: str | None = None,\n    placeholder: str | None = None,\n    size: int | None = None,\n    step: str | None = None,\n    textUpdateMode: str = 'default',\n    **kwargs\n) -&gt; QuestionTextModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-4",
    "href": "ref/wrappers.html#arguments-4",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nautocomplete : str | None A value of autocomplete attribute for &lt;input&gt;. See MDN for a list: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#token_list_tokens.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\ninputType : str | None The type of the input. Can be ‘text’, ‘password’, ‘email’, ‘url’, ‘tel’, ‘number’, ‘date’, ‘datetime-local’, ‘time’, ‘month’, ‘week’, ‘color’.\nmax : str The max attribute of &lt;input&gt;. Syntax depends on the inputType. See MDN for details: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max.\nmaxErrorText : str | None Error text if the value exceeds max.\nmaxLength : int | None The maximum length of the input in characters. Use 0 for no limit. Use -1 for the default limit.\nmaxValueExpression : str | None Expression to decide the maximum value.\nmaxWidth : str Maximum width of the question in CSS units.\nmin : str | None The min attribute of &lt;input&gt;. Syntax depends on the inputType. See MDN for details: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min.\nminErrorText : str | None Error text if the value is less than min.\nminValueExpression : str | None Expression to decide the minimum value.\nminWidth : str Minimum width of the question in CSS units.\nplaceholder : str | None Placeholder text for the input.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nsize : int | None The width of the input in characters. A value for size attribute of &lt;input&gt;.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\nstep : str | None The step attribute of &lt;input&gt;. Syntax depends on the inputType. See MDN for details: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step.\ntextUpdateMode : str The mode of updating the text. Can be ‘default’, ‘onBlur’ (update after the field had been unclicked), ‘onTyping’ (update every key press).\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-5",
    "href": "ref/wrappers.html#signature-5",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ncheckbox(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    **kwargs\n) -&gt; QuestionCheckboxModel | list[QuestionCheckboxModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-5",
    "href": "ref/wrappers.html#arguments-5",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nchoices : str | dict | list The choices for the question. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ...}. You can also add visibleIf, enableIf, and requiredIf to the dictionary.\nchoicesFromQuestion : str | None The name of the question to get the choices from if the are to be copied. Use with choicesFromQuestionMode.\nchoicesFromQuestionMode : str The mode of copying choices. Can be ‘all’, ‘selected’, ‘unselected’.\nchoicesOrder : str The order of the choices. Can be ‘none’, ‘asc’, ‘desc’, ‘random’.\ncolCount : int | None The number of columns for the choices. 0 means a single line.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndontKnowText: str | None = None\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfChoicesEmpty: bool | None = None\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nisAllSelected : bool | None Start with all choices selected. Default is False.\nmaxSelectedChoices : int Maximum number of selected choices. 0 means no limit.\nmaxWidth : str Maximum width of the question in CSS units.\nminSelectedChoices : int Minimum number of selected choices. 0 means no limit.\nminWidth : str Minimum width of the question in CSS units.\nnoneText: str | None = None\notherErrorText: str | None = None\notherText: str | None = None\nreadOnly : bool Whether the question is read-only.\nrefuseText: str | None = None\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nselectAllText : str | None Text for the ‘Select All’ item.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowDontKnowItem: bool = False\nshowNoneItem: bool = False\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nshowOtherItem: bool = False\nshowRefuseItem: bool = False\nshowSelectAllItem : bool | None Whether to show the ‘Select All’ item.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-6",
    "href": "ref/wrappers.html#signature-6",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nranking(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    longTap: bool = True,\n    selectToRankAreasLayout: str = 'horizontal',\n    selectToRankEmptyRankedAreaText: str | None = None,\n    selectToRankEmptyUnrankedAreaText: str | None = None,\n    selectToRankEnabled: bool = False,\n    **kwargs\n) -&gt; QuestionRankingModel | list[QuestionRankingModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-6",
    "href": "ref/wrappers.html#arguments-6",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nchoices : str | dict | list The choices for the question. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ...}. You can also add visibleIf, enableIf, and requiredIf to the dictionary.\nchoicesFromQuestion : str | None The name of the question to get the choices from if the are to be copied. Use with choicesFromQuestionMode.\nchoicesFromQuestionMode : str The mode of copying choices. Can be ‘all’, ‘selected’, ‘unselected’.\nchoicesOrder : str The order of the choices. Can be ‘none’, ‘asc’, ‘desc’, ‘random’.\ncolCount : int | None The number of columns for the choices. 0 means a single line.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndontKnowText: str | None = None\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfChoicesEmpty: bool | None = None\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nisAllSelected : bool | None Start with all choices selected. Default is False.\nlongTap : bool Whether to use long tap for dragging on mobile devices.\nmaxSelectedChoices : int Maximum number of selected choices. 0 means no limit.\nmaxWidth : str Maximum width of the question in CSS units.\nminSelectedChoices : int Minimum number of selected choices. 0 means no limit.\nminWidth : str Minimum width of the question in CSS units.\nnoneText: str | None = None\notherErrorText: str | None = None\notherText: str | None = None\nreadOnly : bool Whether the question is read-only.\nrefuseText: str | None = None\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nselectAllText : str | None Text for the ‘Select All’ item.\nselectToRankAreasLayout : str The layout of the ranked and unranked areas when selectToRankEnabled=True. Can be ‘horizontal’, ‘vertical’.\nselectToRankEmptyRankedAreaText : str | None Text for the empty ranked area when selectToRankEnabled=True.\nselectToRankEmptyUnrankedAreaText : str | None Text for the empty unranked area when selectToRankEnabled=True.\nselectToRankEnabled : bool Whether user should select items they want to rank before ranking them. Default is False.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowDontKnowItem: bool = False\nshowNoneItem: bool = False\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nshowOtherItem: bool = False\nshowRefuseItem: bool = False\nshowSelectAllItem : bool | None Whether to show the ‘Select All’ item.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-7",
    "href": "ref/wrappers.html#signature-7",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nradio(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    showClearButton: bool = False,\n    **kwargs\n) -&gt; QuestionRadiogroupModel | list[QuestionRadiogroupModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-7",
    "href": "ref/wrappers.html#arguments-7",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nchoices : str | dict | list The choices for the question. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ...}. You can also add visibleIf, enableIf, and requiredIf to the dictionary.\nchoicesFromQuestion : str | None The name of the question to get the choices from if the are to be copied. Use with choicesFromQuestionMode.\nchoicesFromQuestionMode : str The mode of copying choices. Can be ‘all’, ‘selected’, ‘unselected’.\nchoicesOrder : str The order of the choices. Can be ‘none’, ‘asc’, ‘desc’, ‘random’.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ncolCount : int | None The number of columns for the choices. 0 means a single line.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndontKnowText: str | None = None\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfChoicesEmpty: bool | None = None\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nnoneText: str | None = None\notherErrorText: str | None = None\notherText: str | None = None\nreadOnly : bool Whether the question is read-only.\nrefuseText: str | None = None\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowClearButton : bool Show a button to clear the answer.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowDontKnowItem: bool = False\nshowNoneItem: bool = False\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nshowOtherItem: bool = False\nshowRefuseItem: bool = False\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.\nReturns:\nQuestionRadiogroupModel: The question object model or a list of question object models if title is a list.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-8",
    "href": "ref/wrappers.html#signature-8",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ndropdownMultiple(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    allowClear: bool = True,\n    closeOnSelect: int | None = None,\n    hideSelectedItems: bool | None = False,\n    placeholder: str | None = None,\n    searchEnabled: bool = True,\n    searchMode: str = 'contains',\n    **kwargs\n) -&gt; QuestionTagboxModel | list[QuestionTagboxModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-8",
    "href": "ref/wrappers.html#arguments-8",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nchoices : str | dict | list The choices for the question. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ...}. You can also add visibleIf, enableIf, and requiredIf to the dictionary.\nallowClear : str Whether to show the ‘Clear’ button for each answer.\nchoicesFromQuestion : str | None The name of the question to get the choices from if the are to be copied. Use with choicesFromQuestionMode.\nchoicesFromQuestionMode : str The mode of copying choices. Can be ‘all’, ‘selected’, ‘unselected’.\nchoicesOrder : str The order of the choices. Can be ‘none’, ‘asc’, ‘desc’, ‘random’.\ncloseOnSelect : int | None Whether to close the dropdown after user selects a specified number of items.\ncolCount : int | None The number of columns for the choices. 0 means a single line.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndontKnowText: str | None = None\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfChoicesEmpty: bool | None = None\nhideNumber : bool Whether to hide the question number.\nhideSelectedItems : bool | None Whether to hide selected items in the dropdown.\nid : str | None HTML id attribute for the question. Usually not necessary.\nisAllSelected : bool | None Start with all choices selected. Default is False.\nmaxSelectedChoices : int Maximum number of selected choices. 0 means no limit.\nmaxWidth : str Maximum width of the question in CSS units.\nminSelectedChoices : int Minimum number of selected choices. 0 means no limit.\nminWidth : str Minimum width of the question in CSS units.\nnoneText: str | None = None\notherErrorText: str | None = None\notherText: str | None = None\nplaceholder : str | None Placeholder text for the input with no value.\nreadOnly : bool Whether the question is read-only.\nrefuseText: str | None = None\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsearchEnabled : bool Whether to enable search in the dropdown.\nsearchMode : str The search mode. Can be ‘contains’ (default), ‘startsWith’. Works only if searchEnabled=True.\nselectAllText : str | None Text for the ‘Select All’ item.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowDontKnowItem: bool = False\nshowNoneItem: bool = False\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nshowOtherItem: bool = False\nshowRefuseItem: bool = False\nshowSelectAllItem : bool | None Whether to show the ‘Select All’ item.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-9",
    "href": "ref/wrappers.html#signature-9",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ntextLong(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    acceptCarriageReturn: bool = True,\n    allowResize: bool | None = None,\n    autoGrow: bool | None = None,\n    rows: int = 4,\n    **kwargs\n) -&gt; QuestionCommentModel | list[QuestionCommentModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-9",
    "href": "ref/wrappers.html#arguments-9",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nacceptCarriageReturn : bool Whether to allow line breaks. Default is True.\nallowResize : bool Whether to allow resizing the input field. Default is True.\nautoGrow : bool Whether to automatically grow the input field. Default is False.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nrows : int Height of the input field in rows’ number.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-10",
    "href": "ref/wrappers.html#signature-10",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nrating(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    maxRateDescription: str | None = None,\n    minRateDescription: str | None = None,\n    rateMax: int = 5,\n    rateMin: int = 1,\n    rateStep: int = 1,\n    rateType: str = 'labels',\n    rateValues: list | None = None,\n    scaleColorMode: str = 'monochrome',\n    **kwargs\n) -&gt; QuestionRatingModel | list[QuestionRatingModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-10",
    "href": "ref/wrappers.html#arguments-10",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nmaxRateDescription : str | None Description for the biggest rate.\nmaxWidth : str Maximum width of the question in CSS units.\nminRateDescription : str | None Description for the smallest rate.\nminWidth : str Minimum width of the question in CSS units.\nrateMax : int Maximum rate. Works only if rateValues is not set.\nrateMin : int Minimum rate. Works only if rateValues is not set.\nrateStep : int Step for the rate. Works only if rateValues is not set.\nrateType : str The type of the rate. Can be ‘labels’, ‘stars’, ‘smileys’.\nrateValues : list | None Manually set rate values. Use a list of primitives and/or dictionaries {\"value\": ..., \"text\": ...}.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nscaleColorMode : str The color mode of the scale if rateType='smileys'. Can be ‘monochrome’, ‘colored’.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-11",
    "href": "ref/wrappers.html#signature-11",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nyesno(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    labelFalse: str | None = None,\n    labelTrue: str | None = None,\n    swapOrder: bool = False,\n    valueFalse: bool | str = False,\n    valueTrue: bool | str = True,\n    **kwargs\n) -&gt; QuestionBooleanModel | list[QuestionBooleanModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-11",
    "href": "ref/wrappers.html#arguments-11",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nlabelFalse : str | None Label for the ‘false’ value.\nlabelTrue : str | None Label for the ‘true’ value.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\nswapOrder : bool Whether to swap the default (no, yes) order of the labels.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvalueFalse : str Value for the ‘false’ option.\nvalueTrue : str Value for the ‘true’ option.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-12",
    "href": "ref/wrappers.html#signature-12",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\ninfo(\n    name: str,\n    *infoHTML: str | list[str],\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    **kwargs\n) -&gt; QuestionHtmlModel | list[QuestionHtmlModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-12",
    "href": "ref/wrappers.html#arguments-12",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ninfoHTML : str The HTML content of the infobox.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitle : str | None The visible title of the question. If None, name is used.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-13",
    "href": "ref/wrappers.html#signature-13",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nmatrix(\n    name: str,\n    title: str | list[str] | None,\n    *columns,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    rows: list | dict | None = None,\n    alternateRows: bool | None = None,\n    columnMinWidth: str | None = None,\n    displayMode: str = 'auto',\n    rowTitleWidth: str | None = None,\n    showHeader: bool = True,\n    verticalAlign: str = 'middle',\n    eachRowUnique: bool | None = None,\n    hideIfRowsEmpty: bool | None = None,\n    isAllRowRequired: bool = False,\n    rowsOrder: str = 'initial',\n    **kwargs\n) -&gt; QuestionMatrixModel | list[QuestionMatrixModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-13",
    "href": "ref/wrappers.html#arguments-13",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\ncolumns : list | dict The columns of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}.\nrows : list | dict The rows of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ..., \"otherParameter\": ...}.\nalternateRows : bool | None Whether to alternate the rows.\ncolumnMinWidth : str | None Minimum width of the column in CSS units.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndisplayMode : str The display mode of the matrix. Can be ‘auto’, ‘list’, ‘table’.\neachRowUnique : bool | None Whether each row should have a unique answer. Defaults to False.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideIfRowsEmpty : bool | None Whether to hide the question if no rows are visible.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nisAllRowRequired : bool Whether each and every row is to be required.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nreadOnly : bool Whether the question is read-only.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nrowTitleWidth : str | None Width of the row title in CSS units.\nrowsOrder : str The order of the rows. Can be ‘initial’, ‘random’.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowHeader : bool Whether to show the header of the table.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nverticalAlign : str The vertical alignment of the content. Can be ‘top’, ‘middle’.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-14",
    "href": "ref/wrappers.html#signature-14",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nmatrixDynamic(\n    name: str,\n    title: str | list[str] | None,\n    *columns,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    rows: list | dict | None = None,\n    alternateRows: bool | None = None,\n    columnMinWidth: str | None = None,\n    displayMode: str = 'auto',\n    rowTitleWidth: str | None = None,\n    showHeader: bool = True,\n    verticalAlign: str = 'middle',\n    cellErrorLocation: str = 'default',\n    cellType: str | None = None,\n    isUniqueCaseSensitive: bool = False,\n    placeHolder: str | None = None,\n    transposeData: bool = False,\n    addRowLocation: str = 'default',\n    addRowText: str | None = None,\n    allowAddRows: bool = True,\n    allowRemoveRows: bool = True,\n    allowRowsDragAndDrop: bool = False,\n    confirmDelete: bool = False,\n    confirmDeleteText: str | None = None,\n    defaultRowValue: str | None = None,\n    defaultValueFromLastRow: bool = False,\n    emptyRowsText: str | None = None,\n    hideColumnsIfEmpty: bool = False,\n    maxRowCount: int = 1000,\n    minRowCount: int = 0,\n    removeRowText: str | None = None,\n    rowCount: int = 2,\n    **kwargs\n) -&gt; QuestionMatrixDynamicModel | list[QuestionMatrixDynamicModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-14",
    "href": "ref/wrappers.html#arguments-14",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\ncolumns : list | dict The columns of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}.\nrows : list | dict The rows of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ..., \"otherParameter\": ...}.\naddRowLocation : str The location of the ‘Add row’ button. Can be ‘default’, ‘top’, ‘bottom’, ‘topBottom’ (both top and bottom).\naddRowText : str | None Text for the ‘Add row’ button.\nallowAddRows : bool Whether to allow adding rows.\nallowRemoveRows : bool Whether to allow removing rows.\nallowRowsDragAndDrop : bool Whether to allow dragging and dropping rows to change order.\nalternateRows : bool | None Whether to alternate the rows.\ncellErrorLocation : str The location of the error text for the cells. Can be ‘default’, ‘top’, ‘bottom’.\ncellType : str | None The type of the matrix cells. Can be overridden for individual columns. Can be “dropdown” (default), “checkbox”, “radiogroup”, “tagbox”, “text”, “comment”, “boolean”, “expression”, “rating”.\nchoices : str | dict | list The default choices for all select questions. Can be overridden for individual columns. Can be string(s) or dictionary(-ies) with structure {\"value\": ..., \"text\": ..., \"otherParameter\": ...}.\ncolumnMinWidth : str | None Minimum width of the column in CSS units.\ncolumns : list | dict The columns of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}.\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\nconfirmDelete : bool Whether to prompt for confirmation before deleting a row. Default is False.\nconfirmDeleteText : str | None Text for the confirmation dialog when confirmDelete is True.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultRowValue : str | None Default value for the new rows that has no defaultValue property.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndefaultValueFromLastRow : bool Whether to copy the value from the last row to the new row.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\ndisplayMode : str The display mode of the matrix. Can be ‘auto’, ‘list’, ‘table’.\nemptyRowsText : str | None Text to display when there are no rows if hideColumnsIfEmpty is True.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideColumnsIfEmpty : bool Whether to hide columns if there are no rows.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nisUniqueCaseSensitive : bool Whether the case of the answer should be considered when checking for uniqueness. If True, “Kowalski” and “kowalski” will be considered different answers.\nmaxRowCount : int Maximum number of rows.\nmaxWidth : str Maximum width of the question in CSS units.\nminRowCount : int Minimum number of rows.\nminWidth : str Minimum width of the question in CSS units.\nplaceHolder : str | None Placeholder text for the cells.\nreadOnly : bool Whether the question is read-only.\nremoveRowText : str | None Text for the ‘Remove row’ button.\nisRequired : bool Whether the question is required.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nrowCount : int The initial number of rows.\nrowTitleWidth : str | None Width of the row title in CSS units.\nrows : list | dict The rows of the matrix. Use primitives or dictionaries {\"text\": ..., \"value\": ...}.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowHeader : bool Whether to show the header of the table.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\ntransposeData : bool Whether to show columns as rows. Default is False.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nverticalAlign : str The vertical alignment of the content. Can be ‘top’, ‘middle’.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-15",
    "href": "ref/wrappers.html#signature-15",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nslider(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    step: int = 1,\n    rangeMin: int = 0,\n    rangeMax: int = 100,\n    pipsMode: str = 'positions',\n    pipsValues: list = [0,\n    25,\n    50,\n    75,\n    100],\n    pipsText: list = [0,\n    25,\n    50,\n    75,\n    100],\n    pipsDensity: int = 5,\n    orientation: str = 'horizontal',\n    direction: str = 'ltr',\n    tooltips: bool = True,\n    **kwargs\n) -&gt; QuestionNoUiSliderModel | list[QuestionNoUiSliderModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-15",
    "href": "ref/wrappers.html#arguments-15",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\ntitle : str | None The visible title of the question. If None, name is used.\nstep : int The step of the slider.\nrangeMin : int The minimum value of the slider.\nrangeMax : int The maximum value of the slider.\npipsMode : str The mode of the pips. Can be ‘positions’, ‘values’, ‘count’, ‘range’, ‘steps’. See https://refreshless.com/nouislider/pips/\npipsValues : list The values of the pips.\npipsText : list The text of the pips.\npipsDensity : int The density of the pips.\norientation : str The orientation of the slider. Can be ‘horizontal’, ‘vertical’.\ndirection : str The direction of the slider. Can be ‘ltr’, ‘rtl’.\ntooltips : bool Whether to show tooltips.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-16",
    "href": "ref/wrappers.html#signature-16",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nimage(\n    name: str,\n    *imageLink: str,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    altText: str | None = None,\n    contentMode: str = 'auto',\n    imageFit: str = 'contain',\n    imageHeight: int | str = 150,\n    imageWidth: int | str = 200,\n    **kwargs\n) -&gt; QuestionImageModel | list[QuestionImageModel]",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-16",
    "href": "ref/wrappers.html#arguments-16",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\nimageLink : str | None The src property for  or video link.\naltText : str | None The alt property for .\ncommentPlaceholder : str | None Placeholder text for the comment area.\ncommentText : str | None Text for the comment area.\ncontentMode : str The content type. Can be ‘auto’ (default), ‘image’, ‘video’, ‘youtube’.\ncorrectAnswer : str | None Correct answer for the question. Use for quizzes.\ndefaultValue : str | None Default value for the question.\ndefaultValueExpression : str | None Expression deciding the default value for the question.\ndescription : str | None Optional subtitle or description of the question.\ndescriptionLocation : str The location of the description. Can be ‘default’, ‘underTitle’, ‘underInput’.\nenableIf : str | None Expression to enable the question.\nerrorLocation : str | None Location of the error text. Can be ‘default’ ‘top’, ‘bottom’.\nhideNumber : bool Whether to hide the question number.\nid : str | None HTML id attribute for the question. Usually not necessary.\nimageFit : str The object-fit property of . Can be ‘contain’, ‘cover’, ‘fill’, ‘none’. See MDN https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit.\nimageHeight : int | str The height of the image container in CSS units. See imageFit.\nimageWidth : int | str The width of the image container in CSS units. See imageFit.\nisRequired : bool Whether the question is required.\nmaxWidth : str Maximum width of the question in CSS units.\nminWidth : str Minimum width of the question in CSS units.\nreadOnly : bool Whether the question is read-only.\nrequiredErrorText : str | None Error text if the required condition is not met.\nrequiredIf : str | None Expression to make the question required.\nresetValueIf : str | None Expression to reset the value of the question.\nsetValueExpression : str | None Expression to decide on the value of the question to be set. Requires setValueIf.\nsetValueIf : str | None Expression with a condition to set the value of the question. Requires setValueExpression.\nshowCommentArea : bool Whether to show the comment area. Doesn’t work with showOtherItem.\nshowOtherItem : bool Whether to show the ‘Other’ item. Doesn’t work with showCommentArea.\nstartWithNewLine : bool Whether to start the question on a new line.\nstate : str | None If the question should be collapsed or expanded. Can be ‘default’, ‘collapsed’, ‘expanded’.\ntitle : str | None The visible title of the question. If None, name is used.\ntitleLocation : str The location of the title. Can be ‘default’, ‘top’, ‘bottom’, ‘left’, ‘hidden’.\nuseDisplayValuesInDynamicTexts : bool Whether to use display names for question values in placeholders.\nvalidators : ValidatorModel | list[ValidatorModel] | None Validator(s) for the question.\nvisible : bool Whether the question is visible.\nvisibleIf : str | None Expression to make the question visible.\nwidth : str Width of the question in CSS units.\naddCode : dict | None Additional code for the question. Usually not necessary.\ncustomCode : str | None Custom JS commands to be added to the survey.\ncustomFunctions : str | None Custom JS functions definitions to be added to the survey. To be used with customCode.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#signature-17",
    "href": "ref/wrappers.html#signature-17",
    "title": "Wrappers for question types",
    "section": "Signature",
    "text": "Signature\n\nconsent(\n    title: str = 'Do you consent to take part in the study?',\n    error: str = \"You can't continue without a consent\",\n    mode: str = 'forbid',\n    name: str = 'consent',\n    **kwargs\n) -&gt; QuestionBooleanModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/wrappers.html#arguments-17",
    "href": "ref/wrappers.html#arguments-17",
    "title": "Wrappers for question types",
    "section": "Arguments",
    "text": "Arguments\nerror : str Error shown if a person doesn’t consent.\nmode : str What to do if a person doesn’t consent. Can be ‘forbid’ (default, doesn’t allow to continue) or ‘end’ (redirects to the end). For ‘end’ to work, set triggers in the survey() call to [{\"type\": \"complete\", \"expression\": \"{consent} = false\"}]. You can also set completedHtmlOnCondition in the survey() call to [{\"expression\": \"{consent} = false\", \"html\": \"You can't continue without a consent\"}]\nto show a custom message in that case.\nname : str The label of the question. Defaults to “consent”.\nkwargs: Other arguments passed to yesno().",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Wrappers for question types"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html",
    "href": "ref/customExpressionFunctions.html",
    "title": "Custom Expression Functions",
    "section": "",
    "text": "Expression functions are functions that can be used inside expressions and – by extension – in calculated values, dynamic texts and dynamic visibility. SurveyJS includes many built-in functions you can use. The most up-to-date documentation of these (especially including iff(), max(), min() and avg()) is the SurveyJS documentation.\nVeles adds some custom, research-tailored expression functions to the mix. You can use them as you would with the built-in SurveyJS functions.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#signature",
    "href": "ref/customExpressionFunctions.html#signature",
    "title": "Custom Expression Functions",
    "section": "Signature",
    "text": "Signature\nround(\n    number: number | string,\n    decimals: number\n)",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#arguments",
    "href": "ref/customExpressionFunctions.html#arguments",
    "title": "Custom Expression Functions",
    "section": "Arguments",
    "text": "Arguments\nnumber : number | string Number to be rounded. Can be a number, an expression that evaluates to number, or a string with either the name of a question or the name of a variable. See examples.\ndecimals : number How many decimals should the number be rounded to?",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#examples",
    "href": "ref/customExpressionFunctions.html#examples",
    "title": "Custom Expression Functions",
    "section": "Examples",
    "text": "Examples\n\n# Use with calculated values\nvls.survey(\n    somePages,\n    calculatedValues=[\n        {\"name\": \"BMI\", \"expression\": \"round({weight} / ({height} * {height}), 1)\"}\n    ],\n)",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#signature-1",
    "href": "ref/customExpressionFunctions.html#signature-1",
    "title": "Custom Expression Functions",
    "section": "Signature",
    "text": "Signature\nrandom(\n    min: number,\n    max: number,\n    seed: any\n)",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#arguments-1",
    "href": "ref/customExpressionFunctions.html#arguments-1",
    "title": "Custom Expression Functions",
    "section": "Arguments",
    "text": "Arguments\nmin : number The minimum value the return value can get (inclusive).\nmax : number The maximum value the return value can get (inclusive).\nseed : any Random seed for the generator1. Set if you want the number not to change for a particular participant once randomly selected. Can be anything, e.g. the name of the calculated value or some other label. If not set, the number will be set randomly each time a survey value changes (e.g. a question is answered). Do not repeat seeds, repeated seed will result in the same random value selected. See examples.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#examples-1",
    "href": "ref/customExpressionFunctions.html#examples-1",
    "title": "Custom Expression Functions",
    "section": "Examples",
    "text": "Examples\n\n# Use to create subgroups\nvls.survey(\n    vls.page(\n        \"manipulation_page\",\n        vls.info(\"manipulation\", \"## You are stupid!\"),\n        visibleIf=\"{group} = 1 and {subgroup} = 5\",  # show only to 1/5 of the first group\n    ),\n    numberOfGroups=2,\n    calculatedValues=[\n        {\n            \"name\": \"subgroup\",\n            \"expression\": \"random(1, 5, 'subgroup')\",  # set seed if the value should be selected once and once only\n        }\n    ],\n)",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "ref/customExpressionFunctions.html#footnotes",
    "href": "ref/customExpressionFunctions.html#footnotes",
    "title": "Custom Expression Functions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTechnically the value of this argument is concatenated with the participant’s random ID, so the seed could be different for each participant.↩︎",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Custom Expression Functions"
    ]
  },
  {
    "objectID": "library/pl.html",
    "href": "library/pl.html",
    "title": "Polish test library",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nDescription\n\n\nCategories\n\n\n\n\n\n\nTen Item Personality Inventory (TIPI)\n\n\ntipi()\n\n\nTen item adaptation of Big Five. Measures five personality traits: Extraversion, Agreeableness, Conscientiousness, Emotional Stability and Openness to Experience.\n\n\npersonality\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "library/en/rses.html",
    "href": "library/en/rses.html",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "",
    "text": "veleslibrary.questionnaires.rses"
  },
  {
    "objectID": "library/en/rses.html#module",
    "href": "library/en/rses.html#module",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "",
    "text": "veleslibrary.questionnaires.rses"
  },
  {
    "objectID": "library/en/rses.html#import",
    "href": "library/en/rses.html#import",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Import",
    "text": "Import\nfrom veleslibrary.questionnaires.rses import rses"
  },
  {
    "objectID": "library/en/rses.html#original",
    "href": "library/en/rses.html#original",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Original",
    "text": "Original\n\n\nRosenberg, M. (2011). Rosenberg self-esteem scale [Database record]. APA PsycTests. https://doi.org/10.1037/t01038-000"
  },
  {
    "objectID": "library/en/rses.html#score-calculation",
    "href": "library/en/rses.html#score-calculation",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Score calculation",
    "text": "Score calculation\nA simple sum."
  },
  {
    "objectID": "library/en/rses.html#reverse-items",
    "href": "library/en/rses.html#reverse-items",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Reverse items",
    "text": "Reverse items\n3, 5, 8, 10"
  },
  {
    "objectID": "library/en/rses.html#subscales",
    "href": "library/en/rses.html#subscales",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Subscales",
    "text": "Subscales\nNone."
  },
  {
    "objectID": "library/en/rses.html#reliability",
    "href": "library/en/rses.html#reliability",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Reliability",
    "text": "Reliability\nα = .88"
  },
  {
    "objectID": "library/en/rses.html#implemented-by",
    "href": "library/en/rses.html#implemented-by",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Implemented by",
    "text": "Implemented by\nJędrusiak, Jakub (University of Wrocław)"
  },
  {
    "objectID": "library/en/rses.html#args",
    "href": "library/en/rses.html#args",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Args",
    "text": "Args\nname : str Base name for pages and questions. Defaults to “RSES”.\ninstruction : str Instruction for the questionnaire. None means that the default instruction will be used.\nquestionOptions : dict | None Additional options for questions as a dictionary. Defaults to None.\npageOptions : dict | None Additional options for pages as a dictionary. Defaults to None."
  },
  {
    "objectID": "library/en/rses.html#returns",
    "href": "library/en/rses.html#returns",
    "title": "Rosenberg Self-Esteem Scale (RSES)",
    "section": "Returns",
    "text": "Returns\nPageModel PageModel with the RSES questionnaire. Use the * operator to unpack it to questions."
  },
  {
    "objectID": "library/en/nfcs.html",
    "href": "library/en/nfcs.html",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "",
    "text": "veleslibrary.questionnaires.nfcs"
  },
  {
    "objectID": "library/en/nfcs.html#module",
    "href": "library/en/nfcs.html#module",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "",
    "text": "veleslibrary.questionnaires.nfcs"
  },
  {
    "objectID": "library/en/nfcs.html#import",
    "href": "library/en/nfcs.html#import",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Import",
    "text": "Import\nfrom veleslibrary.questionnaires.nfcs import nfcs"
  },
  {
    "objectID": "library/en/nfcs.html#original",
    "href": "library/en/nfcs.html#original",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Original",
    "text": "Original\n\n\nRoets, A., & Van Hiel, A. (2007). Separating ability from need: Clarifying the dimensional structure of the need for closure scale. Personality and Social Psychology Bulletin, 33(2), 266–280. https://doi.org/10.1177/0146167206294744\n\n\nWebster, D. M., & Kruglanski, A. W. (1994). Individual differences in need for cognitive closure. Journal of Personality and Social Psychology, 67(6), 1049–1062. https://doi.org/10.1037/0022-3514.67.6.1049\n\n\nYou need to cite both papers if you use the NFCS in your research."
  },
  {
    "objectID": "library/en/nfcs.html#score-calculation",
    "href": "library/en/nfcs.html#score-calculation",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Score calculation",
    "text": "Score calculation\nA simple sum."
  },
  {
    "objectID": "library/en/nfcs.html#reverse-items",
    "href": "library/en/nfcs.html#reverse-items",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Reverse items",
    "text": "Reverse items\n2, 5, 18, 19, 20, 24, 27, 28, 34, 37, 41"
  },
  {
    "objectID": "library/en/nfcs.html#subscales",
    "href": "library/en/nfcs.html#subscales",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Subscales",
    "text": "Subscales\n\nNeed for order: 1, 6, 10, 20, 23, 27, 32, 33, 35, 41\nNeed for predictability: 5, 7, 11, 18, 19, 25, 26, 40\nDecisiveness: 12, 13, 15, 16, 17, 22\nAvoidance of ambiguity: 3, 8, 14, 21, 29, 30, 31, 36, 38\nClosed mindedness: 2, 4, 9, 24, 28, 34, 37, 39"
  },
  {
    "objectID": "library/en/nfcs.html#reliability",
    "href": "library/en/nfcs.html#reliability",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Reliability",
    "text": "Reliability\nα = .84\n\nSubscales\n\nNeed for order: α = .82\nNeed for predictability: α = .79\nDecisiveness: α = .70\nAvoidance of ambiguity: α = .67\nClosed mindedness: α = .62"
  },
  {
    "objectID": "library/en/nfcs.html#implemented-by",
    "href": "library/en/nfcs.html#implemented-by",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Implemented by",
    "text": "Implemented by\nJędrusiak, Jakub (University of Wrocław)"
  },
  {
    "objectID": "library/en/nfcs.html#args",
    "href": "library/en/nfcs.html#args",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Args",
    "text": "Args\nname : str Base name for pages and questions. Defaults to “NFCS”.\ninstruction : str Instruction for the questionnaire. None means that the default instruction will be used.\ntitle : str Title for the matrix. Defaults to None.\nmatrixOptions : dict | None Additional options for the matrixDropdown as a dictionary. Defaults to None.\nratingOptions : dict | None Additional options for the rating column as a dictionary. Defaults to None.\npageOptions : dict | None Additional options for pages as a dictionary. Defaults to None."
  },
  {
    "objectID": "library/en/nfcs.html#returns",
    "href": "library/en/nfcs.html#returns",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Returns",
    "text": "Returns\nPageModel PageModel with the NFCS long questionnaire. Use the * operator to unpack it to questions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Veles is a free and open source Python research package, primarly for social scientists. It’s goal is to provide an interface for surveys and chronometric experiments. It combines the power of Survey.js and PsychoJS (PsychoPy) with a Python interface to create self contained research units. They can then be self-hosted or hosted using VelesWeb free service for academics.\n\nOverview\nVeles is in alpha phase of development, but the goal features are:\n\nFree and open source.\nText-based, so automatable and easily modifiable.\nQuestionnaire library for fast creation.\nIntegration with GitHub.\nAbility to use JavaScript and CSS directly.\nOpen source documentation.\nPython-based, so every Python tool works.\nEasy to collaborate through git.\nCustom redirection in the end (for panels).\nPsychoPy integration.\nModifiable themes.\n\n\n\nUsage\nSee Getting started for an introduction.\nYou can install development version with:\npip install velesresearch@git+https://github.com/jakub-jedrusiak/VelesResearch.git\nVeles is also on PyPI but it can’t currently be considered stable anyway:\npip install velesresearch\nNote that bun is required for Veles to work. Use one of the following commands to install it:\n# Linux and MacOS\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows\npowershell -c \"irm bun.sh/install.ps1|iex\"\nIf everything went well, command bun --version should return a version number. See Getting started if you get any errors.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Introduction"
    ]
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started",
    "section": "",
    "text": "There are a few things you need to install before using Veles, as it is more a library than a program. Namely you need to install Python, some IDE like Visual Studio Code and a JavaScript framework called bun. This section will get you through the process. Whenever I refer to a terminal, I mean your system console (Powershell in Windows). To paste to a terminal, you might have to use Ctrl+Shit+V instead of the standard Ctrl+V shortcut. Same with copying, as Ctrl+C in terminals is used to stop a running process. If you get an error, read it and go to the Troubleshooting section.\n\n\nVeles is a Python library, so before using it, you need to install Python. If you’re using Linux or MacOS, you already have Python installed by default. If you use Windows, you can download the installation bundle from the official website. During installation, check the box saying “add Python to PATH”. It will enable you to run Python by writing python in the terminal, without the full path to python.exe.\nYou can verify if python works correctly by opening your terminal, writing the following command and hitting enter.\npython --version\nIf everything went fine, you should see a version number, not an error. If there’s an error, see Troubleshooting below.\nSome really basic knowledge on how to use Python or some basic programming skills is recommended. If you know what’s a variable and how to call functions, you’re good to go. If you use R, you should also be fine. If you don’t know anything about programming, this 1-hour Python introduction will be more than enough (although I think VSCode is better than PyCharm).\n\n\n\nNext you need an IDE which is a fancy word for programming text editor. You can use any IDE, but I highly recommend Visual Studio Code. Alternatively you use RStudio if you want. If you want to use VS Code, it’s a good idea to also download Python Extension Pack, Pylance and Black formatter. They will make our life much easier. After installing the extensions, go to your preferences (Ctrl+Shift+P and search for “Open user settings”1), find and check “Format on save” checkbox. It’s a quality-of-life option that ensures your code file is always pretty and readable. You can do it from within the program.\n\n\n\nCheck the “Format on save” option to ensure maximum readability of your code at all times.\n\n\n\n\n\nTo actually build (or even preview) your survey, you must have bun installed2. It’s a modern, incredibly fast JavaScript framework and is used to download some dependencies like Survey.js and React. If you use Windows, you need to have at least Windows 10 version 1809. You can always see the current installation process on the bun website. At the time this text is written, to install bun you need to open your terminal, write the command appropriate for your operating system and hit enter:\n# Linux and MacOS\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows\npowershell -c \"irm bun.sh/install.ps1|iex\"\nIf anything goes wrong, see Troubleshooting below. If everything went well, the following command should not return an error:\nbun --version\n\n\n\nThere are a number of things that can go wrong in the process, especially on Windows. Please, read the error messages, they are informative. See the instructions below to know how to react.\n\n\nYou can get an error saying something aroud “python is not a recognisable script” or “bun not found”. The first thing you should do (especially on Windows) is to reboot your system, so the enviroment variables could refresh.\nIf you use Linux and don’t use bash as your main terminal (and use e.g. zsh or fish), you might need to add bun to your PATH manually. Please, google the appropriate PATH adding method for your terminal.\n\n\n\nThis Windows-specific error refers to the Powershell’s execution policies. If you get it, you need to change Powershell’s execution policy to allow running custom scripts. Use the following command and hit enter:\nSet-ExecutionPolicy Bypass\nYou might be asked for confirmation. Type y and hit enter again. Now everything should run smoothly.\n\n\n\nTo install bun on Linux, you need to have the unzip package installed. Use your distribution’s package manager to install it before attempting to install bun.\n\nUbuntuArchCentOS/REHL\n\n\nsudo apt install unzip\n\n\nsudo pacman -S unzip\n\n\nsudo yum install unzip\n\n# or\nsudo dnf install unzip",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#python",
    "href": "getting-started.html#python",
    "title": "Getting started",
    "section": "",
    "text": "Veles is a Python library, so before using it, you need to install Python. If you’re using Linux or MacOS, you already have Python installed by default. If you use Windows, you can download the installation bundle from the official website. During installation, check the box saying “add Python to PATH”. It will enable you to run Python by writing python in the terminal, without the full path to python.exe.\nYou can verify if python works correctly by opening your terminal, writing the following command and hitting enter.\npython --version\nIf everything went fine, you should see a version number, not an error. If there’s an error, see Troubleshooting below.\nSome really basic knowledge on how to use Python or some basic programming skills is recommended. If you know what’s a variable and how to call functions, you’re good to go. If you use R, you should also be fine. If you don’t know anything about programming, this 1-hour Python introduction will be more than enough (although I think VSCode is better than PyCharm).",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#ide",
    "href": "getting-started.html#ide",
    "title": "Getting started",
    "section": "",
    "text": "Next you need an IDE which is a fancy word for programming text editor. You can use any IDE, but I highly recommend Visual Studio Code. Alternatively you use RStudio if you want. If you want to use VS Code, it’s a good idea to also download Python Extension Pack, Pylance and Black formatter. They will make our life much easier. After installing the extensions, go to your preferences (Ctrl+Shift+P and search for “Open user settings”1), find and check “Format on save” checkbox. It’s a quality-of-life option that ensures your code file is always pretty and readable. You can do it from within the program.\n\n\n\nCheck the “Format on save” option to ensure maximum readability of your code at all times.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#bun",
    "href": "getting-started.html#bun",
    "title": "Getting started",
    "section": "",
    "text": "To actually build (or even preview) your survey, you must have bun installed2. It’s a modern, incredibly fast JavaScript framework and is used to download some dependencies like Survey.js and React. If you use Windows, you need to have at least Windows 10 version 1809. You can always see the current installation process on the bun website. At the time this text is written, to install bun you need to open your terminal, write the command appropriate for your operating system and hit enter:\n# Linux and MacOS\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows\npowershell -c \"irm bun.sh/install.ps1|iex\"\nIf anything goes wrong, see Troubleshooting below. If everything went well, the following command should not return an error:\nbun --version",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#troubleshooting",
    "href": "getting-started.html#troubleshooting",
    "title": "Getting started",
    "section": "",
    "text": "There are a number of things that can go wrong in the process, especially on Windows. Please, read the error messages, they are informative. See the instructions below to know how to react.\n\n\nYou can get an error saying something aroud “python is not a recognisable script” or “bun not found”. The first thing you should do (especially on Windows) is to reboot your system, so the enviroment variables could refresh.\nIf you use Linux and don’t use bash as your main terminal (and use e.g. zsh or fish), you might need to add bun to your PATH manually. Please, google the appropriate PATH adding method for your terminal.\n\n\n\nThis Windows-specific error refers to the Powershell’s execution policies. If you get it, you need to change Powershell’s execution policy to allow running custom scripts. Use the following command and hit enter:\nSet-ExecutionPolicy Bypass\nYou might be asked for confirmation. Type y and hit enter again. Now everything should run smoothly.\n\n\n\nTo install bun on Linux, you need to have the unzip package installed. Use your distribution’s package manager to install it before attempting to install bun.\n\nUbuntuArchCentOS/REHL\n\n\nsudo apt install unzip\n\n\nsudo pacman -S unzip\n\n\nsudo yum install unzip\n\n# or\nsudo dnf install unzip",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#creating-a-virtual-environment",
    "href": "getting-started.html#creating-a-virtual-environment",
    "title": "Getting started",
    "section": "Creating a virtual environment",
    "text": "Creating a virtual environment\nI recommend creating a virtual environment for every project. Virtual environments are a kind of containers with all your Python packages. If you have it, Veles will not update for that project unless you explicitly tell it to. It is important for maintaining the code stability. When you have your .py file opened, you should see your Python version number at the bottom of the VS Code window (see figure below). Click it, select “Create Virtual Environment”, then “Venv” and select your newest Python version. A new folder called .venv should now be visible inside your project folder.\n\n\n\nCreating virtual enviroments is recommended for every project.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#installing-veles",
    "href": "getting-started.html#installing-veles",
    "title": "Getting started",
    "section": "Installing Veles",
    "text": "Installing Veles\nNow open a new terminal inside VS Code. Click Terminal → New Terminal or use a keyboard shortcut Ctrl+`. This terminal is opened in your newly created virtual environment. Now we need to install Veles into this virtual environment. To install Veles, write the following command and hit enter.\npip install velesresearch\nYou can also choose development version (unstable but with all the newest features) using this command:\npip install velesresearch@git+https://github.com/jakub-jedrusiak/VelesResearch.git\nTo install the developer version from GitHub, you will need to actually have git installed. Linux comes with git already installed. Windows and MacOS users can download it from the official website or use an appropriate package manager (i.e. Microsoft Store or App Store).\nIf everything went well, you shouldn’t see any errors.\n\n\n\nAn example console output of a successful installation of the velesresearch package.\n\n\nNow we can start writing our script. In your .py file add the following line:\n\nimport velesresearch as vls\n\nIt gives you access to all Veles functions when you write vls.. If VS Code can’t recognise the import, reload the window (Ctrl+Shift+P → Reload Window) or close and reopen VS Code.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#questions",
    "href": "getting-started.html#questions",
    "title": "Getting started",
    "section": "Questions",
    "text": "Questions\nIn Veles, questions are a class of objects. There are two main ways of creating them – separately or when we want to convert a whole questionnaire at once. In both cases we use an appropriate question function. See the docs for all available question types.\n\nradio()\nLet’s start with creating some single-choice questions with vls.radio(). The syntax is as follows:\n\nvls.radio(name, title, *choices, **kwargs)\n\nTo create a single-choice question we need to invoke the vls.radio() function and fill it with appropriate parameters. The first one the name argument which is the internal codename of the question that will later become the name of the column in the database. The participant will not see this. Then we have the title which is the actual text of the question the participant will see. Finally we need to fill in the possible answers. We can separate them with commas. In the end we get:\n\ngender = vls.radio(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n)\n\n\n\n\nGender question example\n\n\nThere are two things to notice here. Firstly, I have saved the created question to a variable called gender. We will then use the variable to put the question inside a page. Secondly, all the texts are inside quotation marks. That is required, because otherwise Python will think the words are variables. Don’t worry – VS Code will scream at you if you forget the quotation marks.\n\n\nQuestion options\nEach question can have a series of additional parameters specified. For example we can make the question required, add a subtitle, add an “Other” option that opens a textbox to specify a custom answer, hide the question number, specify when a question should be visible and so on.\n\ngender = vls.radio(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    isRequired=True,\n    showOtherItem=True,\n    showNoneItem=True,\n    noneText=\"Prefer not to say\",\n    hideNumber=True,\n    description=\"Choose an answer from options below\",\n)\n\n\n\n\nGender questions with options specified\n\n\nEvery type of question (as well as pages and surveys) has its set of possible options. To check the possible options you can consult the docs or (in VS Code with Pylance installed) you can hover your mouse over the name of a function and scroll though the popup.\n\n\n\n\nThe documentation you can see when you hover over a name of the function in VS Code\n\n\n\n\n\n\n\nThe documentation you can see when you hover over a name of the function in VS Code\n\n\n\nIf you want to have some kind of default set of options (e.g. you want every question to have a hidden number and to be required), create a dictionary with curly braces, set all the options there and then pass the dictionary to every question with the ** operator.\n\ndefaultOptions = {\"hideNumber\": True, \"isRequired\": True}\n\ngender = vls.radio(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/prefer not to answer\"\n    **defaultOptions\n)\n\nage = vls.text(\n    \"age\",\n    \"What is your age?\",\n    inputType=\"number\",\n    min=18,\n    **defaultOptions\n)\n\nYou can use the pipe | operator to override a some default options for a single question.\n\ngender = vls.radio(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/prefer not to answer\"\n    **defaultOptions | {\"isRequired\": False}\n)\n\n\n\nWhole questionnaires\nOften in behavioral sciences we want to use a whole questionnaire. It’s quite pointless to format every item separately, because they often have the same scale, options and the labels are predictable. Veles allows for including a whole questionnaire at once.\nTo do this, we need to have the questionnaire in the form of a Python list. We can format it either by hand…\n\n# manually formatted list\nRSES_items = [\n    \"I feel that I am a person of worth, at least on an equal plane with others.\",\n    \"I feel that I have a number of good qualities.\",\n    \"All in all, I am inclined to feel that I am a failure.\",\n    \"I am able to do things as well as most other people.\",\n    \"I feel I do not have much to be proud of.\",\n    \"I take a positive attitude toward myself.\",\n    \"On the whole, I am satisfied with myself.\",\n    \"I wish I could have more respect for myself.\",\n    \"I certainly feel useless at times.\",\n    \"At times I think I am no good at all.\",\n]\n\n…or use the power of programming and format it automatically. Here we have the questionnaire in a textual form, where every item is in its own line. In other words, there the items are separated by a line break. We can save the questionnaire in a variable. Notice the triple quotation marks \"\"\". They allow us to create a multiline strings.\n\n# triple quotation for multi-line strings\nRSES_items = \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\"\n\nSo I saved the questionnaire into a variable called RSES_items. I can now tell python to split it, so it would become a list of items. To do this, we can use the split() method. Methods are functions that we write after a dot to apply them to something. split() takes one argument that is the thing that it needs to split by. In our case it is a line break, in programming denoted with \"\\n\". To split the RSES_items string we could write RSES_items.split(\"\\n\").\n\nRSES = vls.radio(\n    \"RSES\",\n    RSES_items.split(\"\\n\"),\n    \"Strongly Agree; Agree; Disagree; Strongly Disagree\".split(\"; \"),\n    isRequired=True,\n)\n\nIn here I’ve splitted the inside the radio() function, but I also could have done it anywhere before that. To learn more about Python string methods, see W3Schools lesson about them3. Had I used the manually formatted list, I wouldn’t have to write the split() part. Also notice what I did with the scale – we don’t have to save our texts in variables, we can split them directly inside the question creating function. Just do what seems more readable and straightforward. That is to say, I could have also written something like this:\n\nRSES = vls.radio(\n    \"RSES\",\n    \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\".split(\n        \"\\n\"\n    ),\n    \"Strongly Agree; Agree; Disagree; Strongly Disagree\".split(\"; \"),\n    isRequired=True,\n)\n\nThe labels will become \"RSES_1\", \"RSES_2\", \"RSES_3\" etc.\n\n\ninfo()\nTo add an instruction to your questionnaire, use info(). The info() function gets a name and some html content.\n\nvls.page(\n    \"RSES\",\n    vls.info(\n        \"RSES_intro\",\n        \"Please record the appropriate answer for each item, depending on whether you strongly agree, agree, disagree, or strongly disagree with it.\"\n    ),\n    RSES # using the RSES variable from earlier\n)\n\nUse markdown or html to style the text.\n\nvls.info(\n    \"RSES_intro\",\n    \"Please record the appropriate answer &lt;span style='color: #CC0000; font-weight: bold;'&gt;for each item&lt;/span&gt;, depending on whether you **strongly agree**, **agree**, **disagree**, or **strongly disagree** with it.\"\n)\n\n\n\n\nUse vls.info() with markdown and/or html for instructions.\n\n\n\n\nList comprehension\nThis part is not necessary but extremely useful.\nThe power of Python allows us to bulk modify our questions and answers. This might be the greatest advantage Veles has over its GUI-based4 alternatives. Let’s imagine we have a list of drinks we want to ask about in our survey. Yet we don’t want the question text to be just “Tea” or “Coffee”. That would disrespect tea. We need something like “How do you feel about tea?”. English being fairly uncomplicated, we just need to put the drink’s name into the sentence. We can easily use a loop and an f-string5 to do just that.\n\n# get our drinks and make them a list\ndrinks = \"tea coffee juice water\".split(\" \")\n\n# modify with a loop\ndrinks = [f\"How do you like {drink}?\" for drink in drinks]\n\n# add some answers\nanswers = \"I love it; I like it; It's OK; I don't like it; I despise it\".split(\"; \")\n\n# make it a list of questions\nq_drinks = vls.radio(\"drinks\", drinks, answers)\n\nThere’s a few things to unpack here. First we get the list of our drinks separated with some common separator. Put simply, there should be some string (text) separating single drinks – a space in this example. If we also had \"orange juice\" on the list we would need something else, e.g. a comma followed by a space (\"tea, coffee, juice, water, orange juice\"). We then split it and save it in the drinks variable.\nThe third step may seem more complicated, so let’s take it slowly. That is something called list comprehension. It’s a form of a loop in Python that allows us to quickly do something with a list, e.g. call a function for each element or put every element in a certain string. If you think about our question, it is basically “How do you like {drink}?” where “{drink}” is the name of each drink. That is what we start with. Inside square brackets we write [f\"How do you like {drink}?\"]. Notice I have added f before the opening quotation mark. These so called “f-strings” are Python’s way of saying that there is a variable in a string. The variable itself must be inside curly brackets.\nNow we just need to tell Python to do this for each of our drinks. Python doesn’t know what drink means if we don’t tell it. It is not that smart to infer it from the fact that we called our list drinks. To tell Python what we mean by {drink}, we need to write for drink in drinks so we end up with [f\"How do you like {drink}?\" for drink in drinks]. We could have called it differently. [f\"How do you like {i}?\" for i in drinks] would give the same result, but it makes more sense to call it drink rather than i, doesn’t it? [f\"How do you like {drink}?\" for drink in drinks] basically means “Give me this string \"How do you like {drink}?\" where drink means a value from the list called drinks. Do this for every drink in the list called drinks”. We also save the newly created list to the drinks variable, overwriting it.\nWhen we run it, the list ['tea', 'coffee', 'juice', 'water'] becomes ['How do you like tea?', 'How do you like coffee?', 'How do you like juice?', 'How do you like water?']. The new list can be then passed into the radio() function. It could’ve been done manually but learning this technique allows for doing it for arbitrarily long lists.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#panels",
    "href": "getting-started.html#panels",
    "title": "Getting started",
    "section": "Panels",
    "text": "Panels\nPanels are set of questions that have the same set of options. A common usecase is to set a random order of items without moving the instruction. If you set questionsOrder=\"random\" for the whole page, the instruction will also end up in a random spot because it is technically a question. Yet we can put all the questions into a panel and set questionsOrder for the panel. Panels are created with vls.panel().\n\nvls.page(\n    \"RSES\",\n    vls.info(\n        \"RSES_intro\",\n        \"Please record the appropriate answer for each item, depending on whether you strongly agree, agree, disagree, or strongly disagree with it.\"\n    ),\n    vls.panel( \n        RSES # using the RSES variable from earlier\n        questionsOrder=\"random\"\n    )\n)\n\nSee the docs for options you can set for panels.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#pages",
    "href": "getting-started.html#pages",
    "title": "Getting started",
    "section": "Pages",
    "text": "Pages\nEvery survey needs to have at least one page. Page is basically a list of questions but with its own name, title, description and options. You can create it with page().\n\nvls.page(name, questions, **kwargs)\n\nPages have their own names. They don’t yet have many uses in directly in Veles but are still mandatory for SurveyJS compatibility reasons. You can also use them when you write custom JS code. Questions can be provided as a list or values separated by commas. Pages also have their own options like title, description or questions order. See the docs.\n\nintro = vls.page(\"metrics\", gender)  # previously created gender question\n\nself_esteem = vls.page(\n    \"RSES\",\n    RSES,\n    questionsOrder=\"random\",\n    title=\"Rosenberg Self-Esteem Scale\",\n    maxTimeToFinish=300,  # time limit in seconds\n)",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#survey",
    "href": "getting-started.html#survey",
    "title": "Getting started",
    "section": "Survey",
    "text": "Survey\nWhen all elements are created, we can combine them into the final survey. We can do this with the survey() function. It does two things – returns a Survey object and creates your survey’s structure.\n\nvls.survey(pages, **kwargs)\n\n\nvls.survey(\n    \"My smart research\",\n    intro,\n    self_esteem,\n    title=\"Self-esteem and gender\",\n)\n\nBe default, the survey will be created in a subfolder called “survey”. To change the folder’s name or path, use the folderName argument.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#velesweb",
    "href": "getting-started.html#velesweb",
    "title": "Getting started",
    "section": "VelesWeb",
    "text": "VelesWeb\nWhen you generate a Survey, you get a folder with a series of files. Their structure is not that important if you intent to use VelesWeb. The only file that will be interesting, is the main.js file in the build folder.\nLog in to your VelesWeb account, create a new survey, give it a title and – optionally – a description. Then choose the main.js file from your hard drive. Submit and wait. It might take a minute or two. After that you’ll see your survey’s overview.\n\n\n\n\n\n\nFrom here you can test the survey, make it offline or turn on the real data collection. Each survey has two databases – the main one and the test one. The test mode is the default. As you can see below, responses collected in both modes are separated. This makes it easier to test your survey without worrying about messing up the data.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#self-hosting",
    "href": "getting-started.html#self-hosting",
    "title": "Getting started",
    "section": "Self-hosting",
    "text": "Self-hosting\nIf we want to manage our surveys ourselves, we need a place to host them and a place to store the results. Luckily there are free methods to do both. In here we’ll use Vercel for hosting and MongoDB Atlas for storing the results. Additional benefit of self-hosting is that we can use our own domain name e.g. create a special subdomain in our university’s domain (like surveys.uwr.edu.pl). That is if someone will give us access to the DNS settings.\n\nConfiguration\n\nGo to VelesSurvey for Vercel GitHub repository. Click on “Use this template” button. Give your repo a name and confirm with “Create repository from template” button. Of course you need to be logged into your GitHub account.\nGo to Vercel, create an account and from there start a new project. Link the project to your newly created GitHub repo.\nDon’t change the default deployment settings but do click on Enviroment variables. Add a new variable named SECRET_KEY with a value generated with this website and confirm with “Add” button. If you plan to use a custom domain, you add a DOMAIN_NAME variable with a value like .uwr.edu.pl. Don’t worry, if you don’t know yet. You can always add it later. You can read more about custom domains here.\n\n\n\n\n\n\n\n\nWhen the building process ends, you can visit your page. It’s just a white screen with a moving Veles logo. By design, there’s no survey list on the main page. It helps keeping everything confidential.\nNot only we need a place to collect our responses, but also somewhere to store them. For this purpose we’ll use MongoDB and its free 512 MB of space. My rough calculations say it will allow us to collect around 1.5 milion responses before we run out of space. I wish everyone this kind of probe sizes. Go to MongoDB, create a free account and then a free cluster. The website will take you through the whole process.\nNow we need do connect Vercel and MongoDB. You can do it on this website. Click “Add integration” and go with the forms. It will make some needed security changes to your MongoDB cluster, so the answers can be sent from Vercel app to the database.\nThat’s it. Test your application by going to /tea_survey in your Vercel app (e.g. https://tea-research-project.vercel.app/tea_survey/). You should see a survey with a series of questions about tea. When you complete it, you should see a new response in your database.\n\n\n\nUsing\nWhen you create a survey with Veles, you get a folder with a series of files. The most important one is main.js from build subfolder. To add it to your site, you need to create a new subfolder in the surveys folder in your repository. The easiest way to do it it through GitHub Desktop. Use it to download (or “clone”) your repository and create a new folder inside the surveys folder. The name of that folder will become a link to your survey, e.g. if you name it black_tea_study, the link will be something like https://tea-research-project.vercel.app/black_tea_study. Then put your main.js in your newly created folder. Do not rename it. Then use GitHub Desktop to upload (or “push”) your changes. After a minute or so, your survey should be available.\nTo read and save your data you can use web desktop on mongodb.com or with a special program called MongoDB Compass. After any responses are recieved (even for the tea survey), a new database called VelesResponses is created. Every survey gets its own folder (or “collection”). From there you can easily export your data to .csv or .json.\nIf you use R for the analysis, you can connect to the database directly, without having to download anything. See this article for the details. You can also do that with Python.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "getting-started.html#footnotes",
    "href": "getting-started.html#footnotes",
    "title": "Getting started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSearching in English should work despite what language you have set in VS Code.↩︎\nUp to version 0.3.0 Veles used yarn.↩︎\nE.g. you can make everything lowercase or get rid of multiple spaces.↩︎\nOr WYSIWYG.↩︎\n“String” is a computer lingo for text, a group of letters.↩︎\nIn R you can use sum(sapply(gregexpr(\"[[:alpha:]]+\", STRING_HERE), function(x) sum(x &gt; 0))) to count words in a string.↩︎",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Getting started"
    ]
  },
  {
    "objectID": "library/en.html",
    "href": "library/en.html",
    "title": "English test library",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nDescription\n\n\nCategories\n\n\n\n\n\n\nRosenberg Self-Esteem Scale (RSES)\n\n\nrses()\n\n\nOne of the most popular self-esteem scales. Measures global self-esteem.\n\n\n\n\n\n\n\nThe Need for Closure Scale (NFCS)\n\n\nnfcs()\n\n\nMeasures the need for cognitive closure. There are two versions – long (41 items) and short (15 items). This function returns the long version. NFCS can be divided into five subscales: the need for order, the need for predictability, decisiveness, avoidance of ambiguity, closed mindedness.\n\n\ncognition\n\n\n\n\nThe Need for Closure Scale (NFCS)\n\n\nnfcsShort()\n\n\nMeasures the need for cognitive closure. There are two versions – long (41 items) and short (15 items). This function returns the short version. NFCS can be divided into five subscales: the need for order, the need for predictability, decisiveness, avoidance of ambiguity, closed mindedness.\n\n\ncognition\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "library/en/nfcsShort.html",
    "href": "library/en/nfcsShort.html",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "",
    "text": "veleslibrary.questionnaires.nfcs"
  },
  {
    "objectID": "library/en/nfcsShort.html#module",
    "href": "library/en/nfcsShort.html#module",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "",
    "text": "veleslibrary.questionnaires.nfcs"
  },
  {
    "objectID": "library/en/nfcsShort.html#import",
    "href": "library/en/nfcsShort.html#import",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Import",
    "text": "Import\nfrom veleslibrary.questionnaires.nfcs import nfcsShort"
  },
  {
    "objectID": "library/en/nfcsShort.html#original",
    "href": "library/en/nfcsShort.html#original",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Original",
    "text": "Original\n\n\nRoets, A., & Van Hiel, A. (2011). Item selection and validation of a brief, 15-item version of the Need for Closure Scale. Personality and Individual Differences, 50(1), 90–94. https://doi.org/10.1016/j.paid.2010.09.004\n\n\nWebster, D. M., & Kruglanski, A. W. (1994). Individual differences in need for cognitive closure. Journal of Personality and Social Psychology, 67(6), 1049–1062. https://doi.org/10.1037/0022-3514.67.6.1049\n\n\nYou need to cite both papers if you use the NFCS in your research."
  },
  {
    "objectID": "library/en/nfcsShort.html#score-calculation",
    "href": "library/en/nfcsShort.html#score-calculation",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Score calculation",
    "text": "Score calculation\nA simple sum."
  },
  {
    "objectID": "library/en/nfcsShort.html#reverse-items",
    "href": "library/en/nfcsShort.html#reverse-items",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Reverse items",
    "text": "Reverse items\nNone."
  },
  {
    "objectID": "library/en/nfcsShort.html#subscales",
    "href": "library/en/nfcsShort.html#subscales",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Subscales",
    "text": "Subscales\nNone."
  },
  {
    "objectID": "library/en/nfcsShort.html#reliability",
    "href": "library/en/nfcsShort.html#reliability",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Reliability",
    "text": "Reliability\nα = .87"
  },
  {
    "objectID": "library/en/nfcsShort.html#implemented-by",
    "href": "library/en/nfcsShort.html#implemented-by",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Implemented by",
    "text": "Implemented by\nJędrusiak, Jakub (University of Wrocław)"
  },
  {
    "objectID": "library/en/nfcsShort.html#args",
    "href": "library/en/nfcsShort.html#args",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Args",
    "text": "Args\nname : str Base name for pages and questions. Defaults to “NFCS”.\ninstruction : str Instruction for the questionnaire. None means that the default instruction will be used.\ntitle : str Title for the matrix. Defaults to None.\nmatrixOptions : dict | None Additional options for the matrixDropdown as a dictionary. Defaults to None.\nratingOptions : dict | None Additional options for the rating column as a dictionary. Defaults to None.\npageOptions : dict | None Additional options for pages as a dictionary. Defaults to None."
  },
  {
    "objectID": "library/en/nfcsShort.html#returns",
    "href": "library/en/nfcsShort.html#returns",
    "title": "The Need for Closure Scale (NFCS)",
    "section": "Returns",
    "text": "Returns\nPageModel PageModel with the NFCS short questionnaire. Use the * operator to unpack it to questions."
  },
  {
    "objectID": "library/index.html",
    "href": "library/index.html",
    "title": "Library overview",
    "section": "",
    "text": "VelesLibrary is a part of Veles that aims to simplify the surveys’ development process. The idea is that there’s no need to implement the same questionnaire time and time again, when we can create a function that implements it for us.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nEnglish test library\n\n\n\n\nPolish test library\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Test library"
    ]
  },
  {
    "objectID": "library/pl/tipi.html",
    "href": "library/pl/tipi.html",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "",
    "text": "veleslibrary.questionnaires.pl.tipi"
  },
  {
    "objectID": "library/pl/tipi.html#module",
    "href": "library/pl/tipi.html#module",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "",
    "text": "veleslibrary.questionnaires.pl.tipi"
  },
  {
    "objectID": "library/pl/tipi.html#import",
    "href": "library/pl/tipi.html#import",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Import",
    "text": "Import\nfrom veleslibrary.questionnaires.pl.tipi import tipi"
  },
  {
    "objectID": "library/pl/tipi.html#original",
    "href": "library/pl/tipi.html#original",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Original",
    "text": "Original\n\n\nGosling, S. D., Rentfrow, P. J., & Swann, W. B. (2003). A very brief measure of the Big-Five personality domains. Journal of Research in Personality, 37(6), 504–528. https://doi.org/10.1016/S0092-6566(03)00046-1"
  },
  {
    "objectID": "library/pl/tipi.html#adaptation",
    "href": "library/pl/tipi.html#adaptation",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Adaptation",
    "text": "Adaptation\n\n\nSorokowska, A., Słowińska, A., Zbieg, A., & Sorokowski, P. (2014). Polska adaptacja testu Ten Item Personality Inventory (Tipi) – TIPI-PL – wersja standardowa i internetowa. Wrocław: WrocLab."
  },
  {
    "objectID": "library/pl/tipi.html#score-calculation",
    "href": "library/pl/tipi.html#score-calculation",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Score calculation",
    "text": "Score calculation\nA simple sum."
  },
  {
    "objectID": "library/pl/tipi.html#reverse-items",
    "href": "library/pl/tipi.html#reverse-items",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Reverse items",
    "text": "Reverse items\n2, 4, 6, 8, 10"
  },
  {
    "objectID": "library/pl/tipi.html#subscales",
    "href": "library/pl/tipi.html#subscales",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Subscales",
    "text": "Subscales\n\nExtraversion: 1, 6\nAgreeableness: 2, 7\nConscientiousness: 3, 8\nEmotional Stability: 4, 9\nOpenness to Experience: 5, 10"
  },
  {
    "objectID": "library/pl/tipi.html#reliability",
    "href": "library/pl/tipi.html#reliability",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Reliability",
    "text": "Reliability\n\nPaper and pencil\n\nExtraversion: α = .68\nAgreeableness: α = .58\nConscientiousness: α = .75\nEmotional Stability: α = .72\nOpenness to Experience: α = .44\n\n\n\nGoogle Forms\n\nExtraversion: α = .74\nAgreeableness: α = .54\nConscientiousness: α = .80\nEmotional Stability: α = .83\nOpenness to Experience: α = .45\n\n\n\nOnline application\n\nExtraversion: α = .70\nAgreeableness: α = .50\nConscientiousness: α = .76\nEmotional Stability: α = .65\nOpenness to Experience: α = .47"
  },
  {
    "objectID": "library/pl/tipi.html#implemented-by",
    "href": "library/pl/tipi.html#implemented-by",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Implemented by",
    "text": "Implemented by\nJędrusiak, Jakub (University of Wrocław)"
  },
  {
    "objectID": "library/pl/tipi.html#args",
    "href": "library/pl/tipi.html#args",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Args",
    "text": "Args\nname : str Base name for pages and questions. Defaults to “TIPI”.\ninstruction : str Instruction for the questionnaire. Defaults to “Poniżej przedstawiona jest lista cech, które są lub nie są Twoimi charakterystykami. Zaznacz przy poszczególnych stwierdzeniach, do jakiego stopnia zgadzasz się lub nie zgadzasz z każdym z nich. Oceń stopień, w jakim każde z pytań odnosi się do Ciebie.”.\nquestionOptions : dict | None Additional options for questions as a dictionary. Defaults to None.\npageOptions : dict | None Additional options for pages as a dictionary. Defaults to None."
  },
  {
    "objectID": "library/pl/tipi.html#returns",
    "href": "library/pl/tipi.html#returns",
    "title": "Ten Item Personality Inventory (TIPI)",
    "section": "Returns",
    "text": "Returns\nPageModel PageModel with the TIPI questionnaire."
  },
  {
    "objectID": "ref/validators.html",
    "href": "ref/validators.html",
    "title": "Validators",
    "section": "",
    "text": "A validator for text values.\n\n\n\ntextValidator(\n    minLength: int = None,\n    maxLength: int = None,\n    allowDigits: bool = True,\n    error: str = None\n) -&gt; ValidatorModel\n\n\n\n\nmaxLength : int Maximum length for the text validator.\nallowDigits : bool Whether to allow digits for the text validator. Default is True.\nerror : str Custom error text to display. Optional.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature",
    "href": "ref/validators.html#signature",
    "title": "Validators",
    "section": "",
    "text": "textValidator(\n    minLength: int = None,\n    maxLength: int = None,\n    allowDigits: bool = True,\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments",
    "href": "ref/validators.html#arguments",
    "title": "Validators",
    "section": "",
    "text": "maxLength : int Maximum length for the text validator.\nallowDigits : bool Whether to allow digits for the text validator. Default is True.\nerror : str Custom error text to display. Optional.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature-1",
    "href": "ref/validators.html#signature-1",
    "title": "Validators",
    "section": "Signature",
    "text": "Signature\n\nemailValidator(\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments-1",
    "href": "ref/validators.html#arguments-1",
    "title": "Validators",
    "section": "Arguments",
    "text": "Arguments",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature-2",
    "href": "ref/validators.html#signature-2",
    "title": "Validators",
    "section": "Signature",
    "text": "Signature\n\nregexValidator(\n    regex: str = None,\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments-2",
    "href": "ref/validators.html#arguments-2",
    "title": "Validators",
    "section": "Arguments",
    "text": "Arguments\nerror : str Custom error text to display. Optional",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature-3",
    "href": "ref/validators.html#signature-3",
    "title": "Validators",
    "section": "Signature",
    "text": "Signature\n\nexpressionValidator(\n    expression: str = None,\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments-3",
    "href": "ref/validators.html#arguments-3",
    "title": "Validators",
    "section": "Arguments",
    "text": "Arguments\nerror : str Custom error text to display. Optional",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature-4",
    "href": "ref/validators.html#signature-4",
    "title": "Validators",
    "section": "Signature",
    "text": "Signature\n\nnumberValidator(\n    minValue: int = None,\n    maxValue: int = None,\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments-4",
    "href": "ref/validators.html#arguments-4",
    "title": "Validators",
    "section": "Arguments",
    "text": "Arguments\nmaxValue : int Maximum value for the number validator.\nerror : str Custom error text to display. Optional.",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#signature-5",
    "href": "ref/validators.html#signature-5",
    "title": "Validators",
    "section": "Signature",
    "text": "Signature\n\nanswerCountValidator(\n    minCount: int = None,\n    maxCount: int = None,\n    error: str = None\n) -&gt; ValidatorModel",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  },
  {
    "objectID": "ref/validators.html#arguments-5",
    "href": "ref/validators.html#arguments-5",
    "title": "Validators",
    "section": "Arguments",
    "text": "Arguments\nmaxCount : int Maximum count for the answer count validator.\nerror : str Custom error text to display. Optional",
    "crumbs": [
      "{{< fa flask >}} VelesWeb",
      "Reference",
      "Validators"
    ]
  }
]