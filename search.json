[
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started",
    "section": "",
    "text": "Veles is a python library, so before using it, you need to install python. You can download an installation bundle from the official website. During installation, check the box saying to add python to PATH. It will enable you to run python by writing python in the terminal, without the full path.\nUsing an IDE is recommended. You can use any IDE, but I highly recommend Visual Studio Code.\nSome really basic knowledge how to use python is recommended. If you know what’s a variable and how to call functions, you’re good to go."
  },
  {
    "objectID": "getting-started.html#questions",
    "href": "getting-started.html#questions",
    "title": "Getting started",
    "section": "Questions",
    "text": "Questions\nIn Veles, questions are a class of objects. There are two main ways of creating them – separately, using question() function or with questionnaire() when we want to convert a whole questionnaire at once.\n\nquestion()\nLet’s start with creating some metrical questions with question(). The syntax is as follows:\nvls.question(label, question_type, question_text, answers, options, description)\nThe first four arguments are required. label is an internal name of the question. It will become a column name in the database. Question type is a string representing one of the available question types. question_text is what the participant actually sees as an item in the survey. answers are the options the participant can choose. It can be a list or strings separated by commas. options can change the survey’s behaviour (e.g. make the answer order random), but we’ll provide more details later. description look like a subtitle. Both options and description arguments must be named if used.\ngender = vls.question(\n  \"gender\",\n  \"radio\",\n  \"What is your gender?\",\n  \"Woman\",\n  \"Man\",\n  \"Other/I don't want to answer\",\n  description=\"Choose an answer from options below.\"\n)\n\n\n\nGender question example\n\n\nEvery question type has its own wrapper functions, so we could also write gender = vls.radio(\"gender\", What is your gender?\", ...). A complete list of available question types can be found here.\n\n\nQuestion options\nEach question can have a series of options specified. To make it easier, there’s QuestionOptions object class which has all available options listed. Let’s use it to change answer order to random and add real None and Other options. We can create QuestionOptions outside the question itself, save it in a variable and put the variable in the question() function. We can also nest the QuestionOptions object inside the question() function.\ngender = vls.question(\n  \"gender\",\n  \"radio\",\n  \"What is your gender?\",\n  \"Woman\",\n  \"Man\",\n  options=QuestionOptions(\n    answers_order=\"random\",\n    none=True,\n    none_text=\"I don't want to answer\",\n    other=True,\n    other_placeholder=\"Write your gender.\"\n  ),\n  description=\"Choose an answer from options below.\"\n)\n\n\n\nGender questions with options specified\n\n\nList of available options can be found here.\n\n\nquestionnaire()\nOften in psychological sciences we want to use a whole questionnaire. It’s quite pointless to format every item separately, because they often have the same scale, options and predictable labels. In Veles there’s questionnaire() function that allows to convert the whole questionnaire at once.\nvls.questionnaire(label, items, answers, question_type, options, description)\nTo do this, we need to have the questionnaire in the form of a python list. We can format it by hand or using split() method. In the second case, we need to have our items separated by some specified separator, e.g. every item in a separate line.\n# manually formatted list\nRSSI_items = [\n\"I feel that I am a person of worth, at least on an equal plane with others.\",\n\"I feel that I have a number of good qualities.\",\n\"All in all, I am inclined to feel that I am a failure.\",\n\"I am able to do things as well as most other people.\",\n\"I feel I do not have much to be proud of.\",\n\"I take a positive attitude toward myself.\",\n\"On the whole, I am satisfied with myself.\",\n\"I wish I could have more respect for myself.\",\n\"I certainly feel useless at times.\",\n\"At times I think I am no good at all.\"\n]\n\n# list using split()\nRSSI_items = \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\".split(\"\\n\")\n\n# scale by the way\nRSSI_scale = \"\"\"Strongly Agree\nAgree\nDisagree\nStrongly Disagree\"\"\".split(\"\\n\")\nThe \"\"\" allows us to write multiple line strings. We end it with .split(\"\\n\"). Inside split() method’s parenthesis we provide item separator. In here it’s new line sign denoted as \"\\n\".\nUsing either way, we end up wits RSSI_items list containing our questionnaire and RSSI_scale containing possible answers. We can then use the questionnaire() function to turn it into a list of questions.\nRSSI = vls.questionnaire(\n  \"RSSI\",\n  RSSI,\n  RSSI_scale,\n  options=QuestionOptions(\n    required=True\n  )\n)\nOutput is a question list. Each question have the same options, scale and type. The labels are \"RSSI_1\", \"RSSI_2\", \"RSSI_3\" etc.\nOther arguments work as in question(). We can also provide question_type argument which have the default value of \"radio\"."
  },
  {
    "objectID": "getting-started.html#pages",
    "href": "getting-started.html#pages",
    "title": "Getting started",
    "section": "Pages",
    "text": "Pages\nEvery survey needs to have at least one page. You can create it with page().\nvls.page(label, questions, title, description, options)\nPages have their own labels. Questions can be provided as a list or separated by commas. You can also provide page’s title and description. The options argument accepts a PageOptions object. These are different options than in QuestionOptions. The list of available options can be found here.\nintro = vls.page(\"metrics\", gender)\n\nself_esteem = vls.page(\"RSSI\", RSSI)"
  },
  {
    "objectID": "getting-started.html#survey",
    "href": "getting-started.html#survey",
    "title": "Getting started",
    "section": "Survey",
    "text": "Survey\nWhen all elements are created, we can combine them into the final survey. We can do this with survey() function. It does two things – returns a Survey object and creates (or updates) survey.json file.\nvls.survey(pages, title, description, options)\nvls.survey(\n  intro,\n  self_esteem,\n  title = \"Self-esteem and gender\"\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Veles Documentation",
    "section": "",
    "text": "Veles is a free and open source python research package, primarly for social scientists. It’s goal is to provide an interface for surveys and chronometric experiments. It combines the power of Survey.js and PsychoJS (PsychoPy) with python interface to create self contained research units that can be self-hosted. Veles’ own web service for creating and hosting experiments are planned.\nVeles is in pre-alpha development, but the goal features are:\n\nFree and open source.\nText-based, so automatable and easily modifiable.\nIntegration with GitHub.\nAbility to use JavaScript and CSS directly.\nOpen source documentation.\nPython-based, so every python tools work.\nEsay to collaborate through git.\nVS code extension pack.\nCustom redirection in the end (for panels).\nPsychoPy integration.\nJavaScript code preview.\nModifiable themes."
  }
]