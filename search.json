[
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started",
    "section": "",
    "text": "Veles is a Python library, so before using it, you need to install Python. You can download an installation bundle from the official website. During installation, check the box saying to add Python to PATH. It will enable you to run Python by writing python in the terminal, without the full path. If you’re using Linux or MacOS, you already have Python installed by default.\nUsing an IDE is recommended. You can use any IDE, but I highly recommend Visual Studio Code. If you want to use it, it’s a good idea to also download Python Extension Pack and Pylance. You can do it from within the program. You can also use RStudio if you want.\nSome really basic knowledge how to use Python is recommended. If you know what’s a variable and how to call functions, you’re good to go. If you don’t know anything about programming, this 1-hour introduction will be more than enough (although I think VSCode is better than PyCharm).\nTo actually build (or even preview) your survey, you must have yarn installed. It’s a JavaScript package manager and is used to download some dependencies like Survey.js and React. yarn gets installed with Node.js. If you’re a Windows user, you can download it from the official website. MacOS comes with Node.js preinstalled. If you’re a Linux user, chances are you have npm already installed. Otherwise you can use one of the following commands:\n# Ubuntu (and other apt distros)\nsudo apt install npm\n\n# Arch\nsudo pacman -S npm\n\n# winget\nwinget install OpenJS.NodeJS.LTS\n\n# Chocolatey\nchoco install nodejs-lts\n\n# Homebrew\nbrew install node\nIf everything is OK you should be able to run this command in your terminal (PowerShell or cmd in Windows):\nnpm -v\nfter installing node.js, activate yarn with this command in the terminal:\ncorepack enable\nIf everything went well, command yarn -v should return a version number.\n\n\n\nyarn -v in Linux terminal"
  },
  {
    "objectID": "getting-started.html#questions",
    "href": "getting-started.html#questions",
    "title": "Getting started",
    "section": "Questions",
    "text": "Questions\nIn Veles, questions are a class of objects. There are two main ways of creating them – separately or when we want to convert a whole questionnaire at once. In both cases we use the question() function.\n\nquestion()\nLet’s start with creating some metrical questions with question(). The syntax is as follows:\n\nvls.question(label, question_text, answers, question_type, options, description)\n\nThe first four arguments are required. label is an internal name of the question. It will become a column name in the database. Question type is a string representing one of the available question types. question_text is what the participant actually sees as an item in the survey. answers are the options the participant can choose. It can be a list or strings separated by commas. question_type defaults to \"radio\". options can change the survey’s behaviour (e.g. make the answer order random), but I’ll provide more details later. description look like a subtitle. Both options and description arguments must be named if used (i.e. you need to write options=).\n\ngender = vls.question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n    description=\"Choose an answer from options below.\",\n)\n\n\n\n\nGender question example\n\n\nEvery question type has its own wrapper functions, so we could also write gender = vls.radio(\"gender\", \"What is your gender?\", ...). A complete list of available question types can be found here.\n\n\nQuestion options\nEach question can have a series of options specified. To make it easier, there’s QuestionOptions object class which has all available options listed. Let’s use it to change answer order to random and add real None and Other options. We can create QuestionOptions outside the question itself, save it in a variable and put the variable in the question() function. We can also nest the QuestionOptions object inside the question() function.\n\ngender = vls.question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    options=QuestionOptions(\n        answers_order=\"random\",\n        none=True,\n        none_text=\"I don't want to answer\",\n        other=True,\n        other_placeholder=\"Write your gender.\",\n    ),\n    description=\"Choose an answer from options below.\",\n)\n\n\n\n\nGender questions with options specified\n\n\nList of available options can be found here.\n\n\nWhole questionnaires\nOften in behavioral sciences we want to use a whole questionnaire. It’s quite pointless to format every item separately, because they often have the same scale, options and predictable labels. In Veles the question() also allows to convert a whole questionnaire at once.\nTo do this, we need to have the questionnaire in the form of a Python list. We can format it either by hand, using split() method or with split arguments. In the second and third cases, we need to have our items separated by some common separator, e.g. every item in a separate line. Both methods are shown below\n\n# manually formatted list\nRSSI_items = [\n    \"I feel that I am a person of worth, at least on an equal plane with others.\",\n    \"I feel that I have a number of good qualities.\",\n    \"All in all, I am inclined to feel that I am a failure.\",\n    \"I am able to do things as well as most other people.\",\n    \"I feel I do not have much to be proud of.\",\n    \"I take a positive attitude toward myself.\",\n    \"On the whole, I am satisfied with myself.\",\n    \"I wish I could have more respect for myself.\",\n    \"I certainly feel useless at times.\",\n    \"At times I think I am no good at all.\",\n]\n\n# triple quotation for multi-line strings\nRSSI_items = \"\"\"I feel that I am a person of worth, at least on an equal plane with others.\nI feel that I have a number of good qualities.\nAll in all, I am inclined to feel that I am a failure.\nI am able to do things as well as most other people.\nI feel I do not have much to be proud of.\nI take a positive attitude toward myself.\nOn the whole, I am satisfied with myself.\nI wish I could have more respect for myself.\nI certainly feel useless at times.\nAt times I think I am no good at all.\"\"\"\n\n# scale\nRSSI_scale = \"Strongly Agree; Agree; Disagree; Strongly Disagree\"\n\nRSSI = vls.question(\n    \"RSSI\",\n    RSSI.split(\"\\n\"),\n    RSSI_scale.split(\"; \"),\n    options=QuestionOptions(required=True),\n)\n\nThe \"\"\" allows us to write multiple line strings.\nWe save our items and answers in variables and treat them with split(). In here I’ve done it inside the question() function, but I also could have done it anywhere before that. To learn more about Python string methods, see W3Schools lesson about them. Had I used the manually formatted list, I wouldn’t have to write the split() part.\nIf question_text is a list, question() output is a list of questions. Each question in the list have the same options, scale and type. The labels will become \"RSSI_1\", \"RSSI_2\", \"RSSI_3\" etc.\n\n\nList comprehension\nThe power of Python allows us to bulk modify our questions and answers. This might be the greatest advantage Veles has over its GUI-based1 alternatives. Let’s imagine we have a list of drinks we want to ask about in our survey. Yet we don’t want the question text to be just “Tea” or “Coffee” (especially coffee) but rather something like “How do you feel about tea?”. English being fairly uncomplicated, we just need to put the drink’s name into the sentence. We can easily use a loop and an f-string to do just that.\n\nfrom velesresearch import question\n\n# get our drinks and make them a list\ndrinks = \"tea coffee juice water\".split(\" \")\n\n# modify with a loop\ndrinks = [f\"How do you like {drink}?\" for drink in drinks]\n\n# add some answers\nanswers = \"I love it; I like it; It's OK; I don't like it; I despise it\".split(\"; \")\n\n# make it a list of questions\nq_drinks = question(\"drinks\", drinks, answers)\n\nFirst we get our drinks separated with some common separator (a space in this example). We then split it and save it in a drinks variable. After that we modify it with an f-string and a for loop. An f-string is a string preceded with an f. Inside it, we can use variables’ values if we enclose them in curly braces. After the f-string we put a shorthand loop syntax (it’s called list comprehension). It will take every value inside the drinks one by one, put them in a variable called drink2 and do whatever we commanded before the for keyword. When it’s done with the first value, it saves the result and moves on to the next drink until the list ends. Notice everything is in square brackets. We then overwrite the drinks variable with the newly created list."
  },
  {
    "objectID": "getting-started.html#panels",
    "href": "getting-started.html#panels",
    "title": "Getting started",
    "section": "Panels",
    "text": "Panels\nTo be implemented…"
  },
  {
    "objectID": "getting-started.html#pages",
    "href": "getting-started.html#pages",
    "title": "Getting started",
    "section": "Pages",
    "text": "Pages\nEvery survey needs to have at least one page. Page is basically a list of questions but with its own label, title, description and options. You can create it with page().\n\nvls.page(label, questions, title, description, options)\n\nPages have their own labels. They don’t yet have many uses in Veles but are still mandatory for SurveyJS compatibility reasons. Questions can be provided as a list or values separated by commas. You can also provide page’s title and description. The options argument accepts a PageOptions object. These are different options than in QuestionOptions. The list of available options can be found here.\n\nintro = vls.page(\"metrics\", gender)\n\nlimit = vls.PageOptions(time_limit=120)\n\nself_esteem = vls.page(\"RSSI\", RSSI, options=limit)"
  },
  {
    "objectID": "getting-started.html#survey",
    "href": "getting-started.html#survey",
    "title": "Getting started",
    "section": "Survey",
    "text": "Survey\nWhen all elements are created, we can combine them into the final survey. We can do this with survey() function. It does two things – returns a Survey object and builds a website with your survey.\n\nvls.survey(label, pages, title, description, options, create)\n\n\nvls.survey(\"My smart research\", intro, self_esteem, title=\"Self-esteem and gender\")\n\nBuilding a website for the first time might take a few minutes due to yarn downloading or updating JavaScript dependencies. When the dependencies have been downloaded, the whole process gets much faster. The structure of the generated files and what to do with them is explained in Hosting section below."
  },
  {
    "objectID": "getting-started.html#velesweb",
    "href": "getting-started.html#velesweb",
    "title": "Getting started",
    "section": "VelesWeb",
    "text": "VelesWeb\nWhen you generate a Survey, you get a folder with a series of files. Their structure is not that important if you intent to use VelesWeb. The only file that will be interesting, is the archive with .tar.gz extension.\nLog in to your VelesWeb account, create a new survey, give it a title and – optionally – a description. Then choose the .tar.gz file from your hard drive. Submit and wait. It might take a minute or two. After that you’ll see your survey’s overview.\n\nFrom here you can test the survey, make it offline or turn on the real data collection. Each survey has two databases – the main one and the test one. The test mode is the default. As you can see below, responses from both modes are separated."
  },
  {
    "objectID": "getting-started.html#self-hosting",
    "href": "getting-started.html#self-hosting",
    "title": "Getting started",
    "section": "Self-hosting",
    "text": "Self-hosting\nTo be described…"
  },
  {
    "objectID": "getting-started.html#footnotes",
    "href": "getting-started.html#footnotes",
    "title": "Getting started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOr WYSIWYG.↩︎\nWe could have called it otherwise. [f\"How do you like {i}?\" for i in drinks] would give the same result, but it makes more sense to call it drink rather than i, doesn’t it?↩︎"
  },
  {
    "objectID": "ref/tools/page.html",
    "href": "ref/tools/page.html",
    "title": "page",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\npage(label, *questions, title, description=None, options=None)\n\n\n\nArguments\n\nlabel\n\n\nstr; internal name of the page.\n\n\n*questions\n\n\nlist[Question] or Question; list of Question objects to appear on the page.\n\n\ntitle\n\n\nstr; title of the page. Will be visible in the header.\n\n\ndescription\n\n\nstr; text just under page header.\n\n\noptions\n\n\nPageOptions; options object created with PageOptions(), changes behaviour of the page (e.g. random question order).\n\n\n\nValue\nA Page object.\n\n\nSee also\n\nPageOptions() for available page modifications.\nsurvey() for composing pages into one survey.\n\n\n\nExamples\n\nfrom velesresearch import page, question\n\ngender = question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n)\n\nmetric = page(\"metric\", gender)"
  },
  {
    "objectID": "ref/tools/survey.html",
    "href": "ref/tools/survey.html",
    "title": "survey",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\nsurvey(label, *pages, title=None, description=None, options=None, create=True)\n\n\n\nArguments\n\nlabel\n\n\nstr; internal label of the survey. Will become webpage title.\n\n\n*pages\n\n\nlist[Page] or Page; list of Page objects or a single Page object that will create a survey.\n\n\ntitle\n\n\nstr; title of the survey. Will be visible in the header.\n\n\ndescription\n\n\nstr; text just under survey header.\n\n\noptions\n\n\nSurveyOptions; options object created with SurveyOptions(), changes behaviour of the survey.\n\n\ncreate\n\n\nbool or str or Path; controls whether survey is created and then built. Can be done later with create() method. Can be set to True but can also be a path to a folder where the survey files will be created. If False, no additional files are created.\n\n\n\nValue\nA Survey object. If create=True or path, a set of other files and folders are created. Folders src and public contain webpage raw React code. Folder build contains raw, ready to be deployed webpage. package.json, package-lock.json and node-libraries are JavaScript dependencies. When the survey is created for the first time, these dependencies are downloaded from the web.\n\n\nSee also\nSurveyOptions() for available survey modifications.\n\n\nExamples\n\nfrom velesresearch import question, page, survey\n\ngender = question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    \"Other/I don't want to answer\",\n)\n\nmetric = page(\"metric\", gender)\n\nsurvey(\"Just metric\", metric, create=False)"
  },
  {
    "objectID": "ref/options/QuestionOptions.html",
    "href": "ref/options/QuestionOptions.html",
    "title": "QuestionOptions",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.options\n\n\nUsage\n\nQuestionOptions(\n    required=False,\n    answers_order=\"none\",\n    inherit_answers=None,\n    comment=False,\n    comment_text=\"Other\",\n    comment_placeholder=\"\",\n    visible=True,\n    other=False,\n    other_text=\"Other\",\n    other_placeholder=\"\",\n    none=False,\n    none_text=\"None\",\n    clear_button=False,\n)\n\n\n\nArguments\n\nrequired\n\n\nbool; make answer mandatory. Defaults to False.\n\n\nanswers_order\n\n\nstr; in what order should the answers be displayed. Possible values are \"none\" (default; doesn’t change the order), \"random\", \"asc\" (ascending), \"desc\" (descending).\n\n\ninherit_answers\n\n\nstr; if specified, the question inherits answers from another question. Can be set to inherit selected answers only (see inherit_answers_mode argument). Accepts question name.\n\n\ninherit_answers_mode\n\n\nstr; changes mode of answers’ inheritance. Works only if inherit_answers=True. Possible values are \"all\" (inherits all answers), \"selected\" (inherits only selected answers) and \"unselected\" (inherits only unselected answers).\n\n\ncomment\n\n\nbool; if True, a textbox for a comment appears under the question.\n\n\ncomment_text\n\n\nstr; text over the comment textbox. Works only if comment=True.\n\n\ncomment_placeholder\n\n\nstr; placeholder in the comment textbox. Works only if comment=True.\n\n\nvisible\n\n\nbool; should the question be visible? Useful for testing.\n\n\nother\n\n\nbool; add “Other” option.\n\n\nother_text\n\n\nstr; text over the other textbox. Works only if other=True.\n\n\nother_placeholder\n\n\nstr; placeholder in the other textbox. Works only if other=True.\n\n\nnone\n\n\nbool; add “None” option.\n\n\nnone_text\n\n\nstr; text for the “None” option. Works only if none=True.\n\n\nclear_button\n\n\nbool; should a clear button be visible?\n\n\n\nValue\nAn object of class QuestionOptions.\n\n\nExamples\n\nfrom velesresearch import radio, QuestionOptions\n\nradio(\n    \"Favourite drink\",\n    \"Tea\",\n    \"Coffee\",\n    \"Water\",\n    options=QuestionOptions(other=True, none=True, required=True),\n)"
  },
  {
    "objectID": "ref/options/PageOptions.html",
    "href": "ref/options/PageOptions.html",
    "title": "PageOptions",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.options\n\n\nUsage\n\nPageOptions(read_only=False, time_limit=None, visible=True)\n\n\n\nArguments\n\nread_only\n\n\nbool; makes the page read only.\n\n\ntime_limit\n\n\nint; time limit in seconds. Zero, negative values and None will result in unlimited time.\n\n\nvisible\n\n\nbool; should the page be visible? Useful for testing.\n\n\n\nValue\nAn object of class PageOptions.\n\n\nExamples\n\nfrom velesresearch import question, page, PageOptions\n\ndrinks = \"Tea, Coffee, Water\".split(\", \")\ndrinks = [f\"How do you like {drink}?\" for drink in drinks]\nanswers = \"My favourite, I like it, Neutral, I don't like it, I despise it\".split(\", \")\n\nq = question(\"drinks\", drinks, answers)\np = page(\"drinks\", q, title=\"Favourite drinks\", options=PageOptions(time_limit=30))"
  },
  {
    "objectID": "ref/overview.html",
    "href": "ref/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nCategories\n\n\n\n\n\n\nQuestion types\n\n\nWrappers and available types of questions\n\n\nvelesresearch,velesresearch.questiontypes\n\n\n\n\nPageOptions\n\n\nChange Page’s behaviour\n\n\nvelesresearch,velesresearch.options\n\n\n\n\nQuestionOptions\n\n\nChange Question’s behaviour\n\n\nvelesresearch,velesresearch.options\n\n\n\n\nSurveyOptions\n\n\nChange Survey’s behaviour\n\n\nvelesresearch,velesresearch.options\n\n\n\n\npage\n\n\nCreate Page object\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\nquestion\n\n\nCreate Question object\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\nsurvey\n\n\nCreate Survey object and build website\n\n\nvelesresearch,velesresearch.tools\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ref/options/SurveyOptions.html",
    "href": "ref/options/SurveyOptions.html",
    "title": "SurveyOptions",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.options\n\n\nUsage\n\nPageOptions(language=\"en\", url_on_complete=None)\n\n\n\nArguments\n\nlanguage\n\n\nstr; language code. List of available languages available here.\n\n\nurl_on_complete\n\n\nstr; webpage to which the respondent should be redirected after completing the survey.\n\n\n\nValue\nAn object of class SurveyOptions.\n\n\nExamples\n\nfrom velesresearch import question, page, survey, SurveyOptions\n\ndrinks = \"Tea, Coffee, Water\".split(\", \")\nanswers = \"My favourite, I like it, Neutral, I don't like it, I despise it\".split(\", \")\n\nq = question(\"drinks\", drinks, answers)\np = page(\"drinks\", q, title=\"Favourite drinks\")\nsurvey(\n    \"drink_survey\",\n    p,\n    options=SurveyOptions(url_on_complete=\"https://en.wikipedia.org/wiki/Tea\"),\n    create=False,  # for example sake, you probably want to create\n)"
  },
  {
    "objectID": "ref/tools/question_types.html",
    "href": "ref/tools/question_types.html",
    "title": "Question types",
    "section": "",
    "text": "Question type\nDescription\n\n\n\n\ncheckbox\nmultiple choice question\n\n\ndropdown\nsingle choice question with a dropdown list\n\n\ndropdown_multi\nmultiple choice question with a dropdown list\n\n\nradio\nsingle choice question\n\n\nranking\nquestion to rank given items\n\n\ntext\nshort text field\n\n\ntext_long\nlong text box\n\n\nyes_no\na yes/no question\n\n\n\n\n\ncheckbox\nMultiple choice question. Just like radio but allows to pick multiple answers.\n\nShow interactive example\n\n\n\n\n\ndropdown\nSingle choice question. Just like radio but with a dropdown list.\n\nShow interactive example\n\n\n\n\n\ndropdown_multi\nMultiple choice question. Just like checkbox but with a dropdown list.\n\nShow interactive example\n\n\n\n\n\nradio\nSingle choice question. Can have “None” and “Other” options (available through options).\n\nShow interactive example\n\n\n\n\n\nranking\nQuestion to rank given items e.g. from best to worst.\n\nShow interactive example\n\n\n\n\n\ntext\nShort text field. For longer text use text_long.\n\nShow interactive example\n\n\n\n\n\ntext_long\nLong text box. For shorter text use text.\n\nShow interactive example\n\n\n\n\n\nyes_no\nA yes/no question with a simple switch.\n\nShow interactive example"
  },
  {
    "objectID": "ref/tools/question.html",
    "href": "ref/tools/question.html",
    "title": "question",
    "section": "",
    "text": "Modules\nvelesresearch\nvelesresearch.tools\n\n\nUsage\n\nquestion(label, question_text, *answers, question_type, description=None, options=None)\n\n\n\nArguments\n\nlabel\n\n\nstr; internal name of the question. Will become column name in the database.\n\n\nquestion_text\n\n\nstr or list[str]; the text of the question. This is what the participant actually sees. If given as a list, each entery is converted to a question.\n\n\n*answers\n\n\nlist[str] or str; list of possible answers. Can be given as a list object or subsequent string objects separated by commas.\n\n\nquestion_type\n\n\nstr; type of the question. Default is \"radio\". For a list of available question types see Question types.\n\n\noptions\n\n\nQuestionOptions; options object created with QuestionOptions(), changes behaviour of the question (e.g. random answer order or required answer).\n\n\ndescription\n\n\nstr; description of the question. Looks like a subtitle. Can be used to give the participant additional information, e.g. \"in years\" in an age question.\n\n\n\nValue\nThe return value depends on question_text argument type. If it’s a str, then the output is a single Question object. If it’s a list of items, the output value is a list, where each input item is a separate Question object with the same scale and options. Labels of such list have a form of label_number, eg. \"MMPI_1\", \"MMPI_2\", …, \"MMPI_567\".\n\n\nSee also\n\nQuestion types for wrappers like radio() or checkbox() and available question types.\nQuestionOptions() for available question modifications.\npage() for composing questions into pages.\n\n\n\nExamples\n\nfrom velesresearch import question, QuestionOptions\n\ngender = question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    options=QuestionOptions(\n        answers_order=\"random\",\n        none=True,\n        none_text=\"I don't want to answer\",\n        other=True,\n        other_placeholder=\"Write your gender.\",\n    ),\n    description=\"Choose an answer from options below.\",\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Veles is a free and open source Python research package, primarly for social scientists. It’s goal is to provide an interface for surveys and chronometric experiments. It combines the power of Survey.js and PsychoJS (PsychoPy) with Python interface to create self contained research units that can be self-hosted. Veles’ own web service for creating and hosting experiments are planned.\n\nOverview\nVeles is in pre-alpha development, but the goal features are:\n\nFree and open source.\nText-based, so automatable and easily modifiable.\nIntegration with GitHub.\nAbility to use JavaScript and CSS directly.\nOpen source documentation.\nPython-based, so every Python tools work.\nEsay to collaborate through git.\nVS code extension pack.\nCustom redirection in the end (for panels).\nPsychoPy integration.\nJavaScript code preview.\nModifiable themes.\n\n\n\nInstallation\nYou can install the current version of Veles with:\npip install velesresearch\nYou can install development version (unstable) with:\npip install velesresearch@git+https://github.com/jakub-jedrusiak/VelesResearch.git\nNote that yarn is required for Veles to work. You can download it from here or use your package manager.\n# Ubuntu (and other apt distros)\nsudo apt install npm\n\n# Arch\nsudo pacman -S npm\n\n# winget\nwinget install OpenJS.NodeJS.LTS\n\n# Chocolatey\nchoco install nodejs-lts\n\n# Homebrew\nbrew install node\nAfter installing node.js, activate yarn with this command in the terminal:\ncorepack enable\nIf everything went well, command yarn -v should return a version number."
  }
]